import { ClassType } from "type-graphql";
import * as tslib from "tslib";
import * as crudResolvers from "./resolvers/crud/resolvers-crud.index";
import * as argsTypes from "./resolvers/crud/args.index";
import * as actionResolvers from "./resolvers/crud/resolvers-actions.index";
import * as relationResolvers from "./resolvers/relations/resolvers.index";
import * as models from "./models";
import * as outputTypes from "./resolvers/outputs";
import * as inputTypes from "./resolvers/inputs";

const crudResolversMap = {
  AccountVerification: crudResolvers.AccountVerificationCrudResolver,
  BankAccount: crudResolvers.BankAccountCrudResolver,
  Category: crudResolvers.CategoryCrudResolver,
  Donation: crudResolvers.DonationCrudResolver,
  Organisation: crudResolvers.OrganisationCrudResolver,
  OrganisationProjectsProject: crudResolvers.OrganisationProjectsProjectCrudResolver,
  OrganisationUser: crudResolvers.OrganisationUserCrudResolver,
  OrganisationUsersUser: crudResolvers.OrganisationUsersUserCrudResolver,
  Project: crudResolvers.ProjectCrudResolver,
  ProjectCategoriesCategory: crudResolvers.ProjectCategoriesCategoryCrudResolver,
  ProjectImage: crudResolvers.ProjectImageCrudResolver,
  ProjectOrganisationsOrganisation: crudResolvers.ProjectOrganisationsOrganisationCrudResolver,
  ProjectStatus: crudResolvers.ProjectStatusCrudResolver,
  ProjectUpdate: crudResolvers.ProjectUpdateCrudResolver,
  ProjectUsersUser: crudResolvers.ProjectUsersUserCrudResolver,
  QueryResultCache: crudResolvers.QueryResultCacheCrudResolver,
  Reaction: crudResolvers.ReactionCrudResolver,
  StripeTransaction: crudResolvers.StripeTransactionCrudResolver,
  User: crudResolvers.UserCrudResolver,
  UserProjectsProject: crudResolvers.UserProjectsProjectCrudResolver,
  Wallet: crudResolvers.WalletCrudResolver
};
const actionResolversMap = {
  AccountVerification: {
    accountVerification: actionResolvers.FindUniqueAccountVerificationResolver,
    findFirstAccountVerification: actionResolvers.FindFirstAccountVerificationResolver,
    accountVerifications: actionResolvers.FindManyAccountVerificationResolver,
    createAccountVerification: actionResolvers.CreateAccountVerificationResolver,
    createManyAccountVerification: actionResolvers.CreateManyAccountVerificationResolver,
    deleteAccountVerification: actionResolvers.DeleteAccountVerificationResolver,
    updateAccountVerification: actionResolvers.UpdateAccountVerificationResolver,
    deleteManyAccountVerification: actionResolvers.DeleteManyAccountVerificationResolver,
    updateManyAccountVerification: actionResolvers.UpdateManyAccountVerificationResolver,
    upsertAccountVerification: actionResolvers.UpsertAccountVerificationResolver,
    aggregateAccountVerification: actionResolvers.AggregateAccountVerificationResolver,
    groupByAccountVerification: actionResolvers.GroupByAccountVerificationResolver
  },
  BankAccount: {
    bankAccount: actionResolvers.FindUniqueBankAccountResolver,
    findFirstBankAccount: actionResolvers.FindFirstBankAccountResolver,
    bankAccounts: actionResolvers.FindManyBankAccountResolver,
    createBankAccount: actionResolvers.CreateBankAccountResolver,
    createManyBankAccount: actionResolvers.CreateManyBankAccountResolver,
    deleteBankAccount: actionResolvers.DeleteBankAccountResolver,
    updateBankAccount: actionResolvers.UpdateBankAccountResolver,
    deleteManyBankAccount: actionResolvers.DeleteManyBankAccountResolver,
    updateManyBankAccount: actionResolvers.UpdateManyBankAccountResolver,
    upsertBankAccount: actionResolvers.UpsertBankAccountResolver,
    aggregateBankAccount: actionResolvers.AggregateBankAccountResolver,
    groupByBankAccount: actionResolvers.GroupByBankAccountResolver
  },
  Category: {
    category: actionResolvers.FindUniqueCategoryResolver,
    findFirstCategory: actionResolvers.FindFirstCategoryResolver,
    categories: actionResolvers.FindManyCategoryResolver,
    createCategory: actionResolvers.CreateCategoryResolver,
    createManyCategory: actionResolvers.CreateManyCategoryResolver,
    deleteCategory: actionResolvers.DeleteCategoryResolver,
    updateCategory: actionResolvers.UpdateCategoryResolver,
    deleteManyCategory: actionResolvers.DeleteManyCategoryResolver,
    updateManyCategory: actionResolvers.UpdateManyCategoryResolver,
    upsertCategory: actionResolvers.UpsertCategoryResolver,
    aggregateCategory: actionResolvers.AggregateCategoryResolver,
    groupByCategory: actionResolvers.GroupByCategoryResolver
  },
  Donation: {
    donation: actionResolvers.FindUniqueDonationResolver,
    findFirstDonation: actionResolvers.FindFirstDonationResolver,
    donations: actionResolvers.FindManyDonationResolver,
    createDonation: actionResolvers.CreateDonationResolver,
    createManyDonation: actionResolvers.CreateManyDonationResolver,
    deleteDonation: actionResolvers.DeleteDonationResolver,
    updateDonation: actionResolvers.UpdateDonationResolver,
    deleteManyDonation: actionResolvers.DeleteManyDonationResolver,
    updateManyDonation: actionResolvers.UpdateManyDonationResolver,
    upsertDonation: actionResolvers.UpsertDonationResolver,
    aggregateDonation: actionResolvers.AggregateDonationResolver,
    groupByDonation: actionResolvers.GroupByDonationResolver
  },
  Organisation: {
    organisation: actionResolvers.FindUniqueOrganisationResolver,
    findFirstOrganisation: actionResolvers.FindFirstOrganisationResolver,
    organisations: actionResolvers.FindManyOrganisationResolver,
    createOrganisation: actionResolvers.CreateOrganisationResolver,
    createManyOrganisation: actionResolvers.CreateManyOrganisationResolver,
    deleteOrganisation: actionResolvers.DeleteOrganisationResolver,
    updateOrganisation: actionResolvers.UpdateOrganisationResolver,
    deleteManyOrganisation: actionResolvers.DeleteManyOrganisationResolver,
    updateManyOrganisation: actionResolvers.UpdateManyOrganisationResolver,
    upsertOrganisation: actionResolvers.UpsertOrganisationResolver,
    aggregateOrganisation: actionResolvers.AggregateOrganisationResolver,
    groupByOrganisation: actionResolvers.GroupByOrganisationResolver
  },
  OrganisationProjectsProject: {
    organisationProjectsProject: actionResolvers.FindUniqueOrganisationProjectsProjectResolver,
    findFirstOrganisationProjectsProject: actionResolvers.FindFirstOrganisationProjectsProjectResolver,
    organisationProjectsProjects: actionResolvers.FindManyOrganisationProjectsProjectResolver,
    createOrganisationProjectsProject: actionResolvers.CreateOrganisationProjectsProjectResolver,
    createManyOrganisationProjectsProject: actionResolvers.CreateManyOrganisationProjectsProjectResolver,
    deleteOrganisationProjectsProject: actionResolvers.DeleteOrganisationProjectsProjectResolver,
    updateOrganisationProjectsProject: actionResolvers.UpdateOrganisationProjectsProjectResolver,
    deleteManyOrganisationProjectsProject: actionResolvers.DeleteManyOrganisationProjectsProjectResolver,
    updateManyOrganisationProjectsProject: actionResolvers.UpdateManyOrganisationProjectsProjectResolver,
    upsertOrganisationProjectsProject: actionResolvers.UpsertOrganisationProjectsProjectResolver,
    aggregateOrganisationProjectsProject: actionResolvers.AggregateOrganisationProjectsProjectResolver,
    groupByOrganisationProjectsProject: actionResolvers.GroupByOrganisationProjectsProjectResolver
  },
  OrganisationUser: {
    organisationUser: actionResolvers.FindUniqueOrganisationUserResolver,
    findFirstOrganisationUser: actionResolvers.FindFirstOrganisationUserResolver,
    organisationUsers: actionResolvers.FindManyOrganisationUserResolver,
    createOrganisationUser: actionResolvers.CreateOrganisationUserResolver,
    createManyOrganisationUser: actionResolvers.CreateManyOrganisationUserResolver,
    deleteOrganisationUser: actionResolvers.DeleteOrganisationUserResolver,
    updateOrganisationUser: actionResolvers.UpdateOrganisationUserResolver,
    deleteManyOrganisationUser: actionResolvers.DeleteManyOrganisationUserResolver,
    updateManyOrganisationUser: actionResolvers.UpdateManyOrganisationUserResolver,
    upsertOrganisationUser: actionResolvers.UpsertOrganisationUserResolver,
    aggregateOrganisationUser: actionResolvers.AggregateOrganisationUserResolver,
    groupByOrganisationUser: actionResolvers.GroupByOrganisationUserResolver
  },
  OrganisationUsersUser: {
    organisationUsersUser: actionResolvers.FindUniqueOrganisationUsersUserResolver,
    findFirstOrganisationUsersUser: actionResolvers.FindFirstOrganisationUsersUserResolver,
    organisationUsersUsers: actionResolvers.FindManyOrganisationUsersUserResolver,
    createOrganisationUsersUser: actionResolvers.CreateOrganisationUsersUserResolver,
    createManyOrganisationUsersUser: actionResolvers.CreateManyOrganisationUsersUserResolver,
    deleteOrganisationUsersUser: actionResolvers.DeleteOrganisationUsersUserResolver,
    updateOrganisationUsersUser: actionResolvers.UpdateOrganisationUsersUserResolver,
    deleteManyOrganisationUsersUser: actionResolvers.DeleteManyOrganisationUsersUserResolver,
    updateManyOrganisationUsersUser: actionResolvers.UpdateManyOrganisationUsersUserResolver,
    upsertOrganisationUsersUser: actionResolvers.UpsertOrganisationUsersUserResolver,
    aggregateOrganisationUsersUser: actionResolvers.AggregateOrganisationUsersUserResolver,
    groupByOrganisationUsersUser: actionResolvers.GroupByOrganisationUsersUserResolver
  },
  Project: {
    project: actionResolvers.FindUniqueProjectResolver,
    findFirstProject: actionResolvers.FindFirstProjectResolver,
    projects: actionResolvers.FindManyProjectResolver,
    createProject: actionResolvers.CreateProjectResolver,
    createManyProject: actionResolvers.CreateManyProjectResolver,
    deleteProject: actionResolvers.DeleteProjectResolver,
    updateProject: actionResolvers.UpdateProjectResolver,
    deleteManyProject: actionResolvers.DeleteManyProjectResolver,
    updateManyProject: actionResolvers.UpdateManyProjectResolver,
    upsertProject: actionResolvers.UpsertProjectResolver,
    aggregateProject: actionResolvers.AggregateProjectResolver,
    groupByProject: actionResolvers.GroupByProjectResolver
  },
  ProjectCategoriesCategory: {
    projectCategoriesCategory: actionResolvers.FindUniqueProjectCategoriesCategoryResolver,
    findFirstProjectCategoriesCategory: actionResolvers.FindFirstProjectCategoriesCategoryResolver,
    projectCategoriesCategories: actionResolvers.FindManyProjectCategoriesCategoryResolver,
    createProjectCategoriesCategory: actionResolvers.CreateProjectCategoriesCategoryResolver,
    createManyProjectCategoriesCategory: actionResolvers.CreateManyProjectCategoriesCategoryResolver,
    deleteProjectCategoriesCategory: actionResolvers.DeleteProjectCategoriesCategoryResolver,
    updateProjectCategoriesCategory: actionResolvers.UpdateProjectCategoriesCategoryResolver,
    deleteManyProjectCategoriesCategory: actionResolvers.DeleteManyProjectCategoriesCategoryResolver,
    updateManyProjectCategoriesCategory: actionResolvers.UpdateManyProjectCategoriesCategoryResolver,
    upsertProjectCategoriesCategory: actionResolvers.UpsertProjectCategoriesCategoryResolver,
    aggregateProjectCategoriesCategory: actionResolvers.AggregateProjectCategoriesCategoryResolver,
    groupByProjectCategoriesCategory: actionResolvers.GroupByProjectCategoriesCategoryResolver
  },
  ProjectImage: {
    projectImage: actionResolvers.FindUniqueProjectImageResolver,
    findFirstProjectImage: actionResolvers.FindFirstProjectImageResolver,
    projectImages: actionResolvers.FindManyProjectImageResolver,
    createProjectImage: actionResolvers.CreateProjectImageResolver,
    createManyProjectImage: actionResolvers.CreateManyProjectImageResolver,
    deleteProjectImage: actionResolvers.DeleteProjectImageResolver,
    updateProjectImage: actionResolvers.UpdateProjectImageResolver,
    deleteManyProjectImage: actionResolvers.DeleteManyProjectImageResolver,
    updateManyProjectImage: actionResolvers.UpdateManyProjectImageResolver,
    upsertProjectImage: actionResolvers.UpsertProjectImageResolver,
    aggregateProjectImage: actionResolvers.AggregateProjectImageResolver,
    groupByProjectImage: actionResolvers.GroupByProjectImageResolver
  },
  ProjectOrganisationsOrganisation: {
    projectOrganisationsOrganisation: actionResolvers.FindUniqueProjectOrganisationsOrganisationResolver,
    findFirstProjectOrganisationsOrganisation: actionResolvers.FindFirstProjectOrganisationsOrganisationResolver,
    projectOrganisationsOrganisations: actionResolvers.FindManyProjectOrganisationsOrganisationResolver,
    createProjectOrganisationsOrganisation: actionResolvers.CreateProjectOrganisationsOrganisationResolver,
    createManyProjectOrganisationsOrganisation: actionResolvers.CreateManyProjectOrganisationsOrganisationResolver,
    deleteProjectOrganisationsOrganisation: actionResolvers.DeleteProjectOrganisationsOrganisationResolver,
    updateProjectOrganisationsOrganisation: actionResolvers.UpdateProjectOrganisationsOrganisationResolver,
    deleteManyProjectOrganisationsOrganisation: actionResolvers.DeleteManyProjectOrganisationsOrganisationResolver,
    updateManyProjectOrganisationsOrganisation: actionResolvers.UpdateManyProjectOrganisationsOrganisationResolver,
    upsertProjectOrganisationsOrganisation: actionResolvers.UpsertProjectOrganisationsOrganisationResolver,
    aggregateProjectOrganisationsOrganisation: actionResolvers.AggregateProjectOrganisationsOrganisationResolver,
    groupByProjectOrganisationsOrganisation: actionResolvers.GroupByProjectOrganisationsOrganisationResolver
  },
  ProjectStatus: {
    projectStatus: actionResolvers.FindUniqueProjectStatusResolver,
    findFirstProjectStatus: actionResolvers.FindFirstProjectStatusResolver,
    projectStatuses: actionResolvers.FindManyProjectStatusResolver,
    createProjectStatus: actionResolvers.CreateProjectStatusResolver,
    createManyProjectStatus: actionResolvers.CreateManyProjectStatusResolver,
    deleteProjectStatus: actionResolvers.DeleteProjectStatusResolver,
    updateProjectStatus: actionResolvers.UpdateProjectStatusResolver,
    deleteManyProjectStatus: actionResolvers.DeleteManyProjectStatusResolver,
    updateManyProjectStatus: actionResolvers.UpdateManyProjectStatusResolver,
    upsertProjectStatus: actionResolvers.UpsertProjectStatusResolver,
    aggregateProjectStatus: actionResolvers.AggregateProjectStatusResolver,
    groupByProjectStatus: actionResolvers.GroupByProjectStatusResolver
  },
  ProjectUpdate: {
    projectUpdate: actionResolvers.FindUniqueProjectUpdateResolver,
    findFirstProjectUpdate: actionResolvers.FindFirstProjectUpdateResolver,
    projectUpdates: actionResolvers.FindManyProjectUpdateResolver,
    createProjectUpdate: actionResolvers.CreateProjectUpdateResolver,
    createManyProjectUpdate: actionResolvers.CreateManyProjectUpdateResolver,
    deleteProjectUpdate: actionResolvers.DeleteProjectUpdateResolver,
    updateProjectUpdate: actionResolvers.UpdateProjectUpdateResolver,
    deleteManyProjectUpdate: actionResolvers.DeleteManyProjectUpdateResolver,
    updateManyProjectUpdate: actionResolvers.UpdateManyProjectUpdateResolver,
    upsertProjectUpdate: actionResolvers.UpsertProjectUpdateResolver,
    aggregateProjectUpdate: actionResolvers.AggregateProjectUpdateResolver,
    groupByProjectUpdate: actionResolvers.GroupByProjectUpdateResolver
  },
  ProjectUsersUser: {
    projectUsersUser: actionResolvers.FindUniqueProjectUsersUserResolver,
    findFirstProjectUsersUser: actionResolvers.FindFirstProjectUsersUserResolver,
    projectUsersUsers: actionResolvers.FindManyProjectUsersUserResolver,
    createProjectUsersUser: actionResolvers.CreateProjectUsersUserResolver,
    createManyProjectUsersUser: actionResolvers.CreateManyProjectUsersUserResolver,
    deleteProjectUsersUser: actionResolvers.DeleteProjectUsersUserResolver,
    updateProjectUsersUser: actionResolvers.UpdateProjectUsersUserResolver,
    deleteManyProjectUsersUser: actionResolvers.DeleteManyProjectUsersUserResolver,
    updateManyProjectUsersUser: actionResolvers.UpdateManyProjectUsersUserResolver,
    upsertProjectUsersUser: actionResolvers.UpsertProjectUsersUserResolver,
    aggregateProjectUsersUser: actionResolvers.AggregateProjectUsersUserResolver,
    groupByProjectUsersUser: actionResolvers.GroupByProjectUsersUserResolver
  },
  QueryResultCache: {
    queryResultCache: actionResolvers.FindUniqueQueryResultCacheResolver,
    findFirstQueryResultCache: actionResolvers.FindFirstQueryResultCacheResolver,
    queryResultCaches: actionResolvers.FindManyQueryResultCacheResolver,
    createQueryResultCache: actionResolvers.CreateQueryResultCacheResolver,
    createManyQueryResultCache: actionResolvers.CreateManyQueryResultCacheResolver,
    deleteQueryResultCache: actionResolvers.DeleteQueryResultCacheResolver,
    updateQueryResultCache: actionResolvers.UpdateQueryResultCacheResolver,
    deleteManyQueryResultCache: actionResolvers.DeleteManyQueryResultCacheResolver,
    updateManyQueryResultCache: actionResolvers.UpdateManyQueryResultCacheResolver,
    upsertQueryResultCache: actionResolvers.UpsertQueryResultCacheResolver,
    aggregateQueryResultCache: actionResolvers.AggregateQueryResultCacheResolver,
    groupByQueryResultCache: actionResolvers.GroupByQueryResultCacheResolver
  },
  Reaction: {
    reaction: actionResolvers.FindUniqueReactionResolver,
    findFirstReaction: actionResolvers.FindFirstReactionResolver,
    reactions: actionResolvers.FindManyReactionResolver,
    createReaction: actionResolvers.CreateReactionResolver,
    createManyReaction: actionResolvers.CreateManyReactionResolver,
    deleteReaction: actionResolvers.DeleteReactionResolver,
    updateReaction: actionResolvers.UpdateReactionResolver,
    deleteManyReaction: actionResolvers.DeleteManyReactionResolver,
    updateManyReaction: actionResolvers.UpdateManyReactionResolver,
    upsertReaction: actionResolvers.UpsertReactionResolver,
    aggregateReaction: actionResolvers.AggregateReactionResolver,
    groupByReaction: actionResolvers.GroupByReactionResolver
  },
  StripeTransaction: {
    stripeTransaction: actionResolvers.FindUniqueStripeTransactionResolver,
    findFirstStripeTransaction: actionResolvers.FindFirstStripeTransactionResolver,
    stripeTransactions: actionResolvers.FindManyStripeTransactionResolver,
    createStripeTransaction: actionResolvers.CreateStripeTransactionResolver,
    createManyStripeTransaction: actionResolvers.CreateManyStripeTransactionResolver,
    deleteStripeTransaction: actionResolvers.DeleteStripeTransactionResolver,
    updateStripeTransaction: actionResolvers.UpdateStripeTransactionResolver,
    deleteManyStripeTransaction: actionResolvers.DeleteManyStripeTransactionResolver,
    updateManyStripeTransaction: actionResolvers.UpdateManyStripeTransactionResolver,
    upsertStripeTransaction: actionResolvers.UpsertStripeTransactionResolver,
    aggregateStripeTransaction: actionResolvers.AggregateStripeTransactionResolver,
    groupByStripeTransaction: actionResolvers.GroupByStripeTransactionResolver
  },
  User: {
    user: actionResolvers.FindUniqueUserResolver,
    findFirstUser: actionResolvers.FindFirstUserResolver,
    users: actionResolvers.FindManyUserResolver,
    createUser: actionResolvers.CreateUserResolver,
    createManyUser: actionResolvers.CreateManyUserResolver,
    deleteUser: actionResolvers.DeleteUserResolver,
    updateUser: actionResolvers.UpdateUserResolver,
    deleteManyUser: actionResolvers.DeleteManyUserResolver,
    updateManyUser: actionResolvers.UpdateManyUserResolver,
    upsertUser: actionResolvers.UpsertUserResolver,
    aggregateUser: actionResolvers.AggregateUserResolver,
    groupByUser: actionResolvers.GroupByUserResolver
  },
  UserProjectsProject: {
    userProjectsProject: actionResolvers.FindUniqueUserProjectsProjectResolver,
    findFirstUserProjectsProject: actionResolvers.FindFirstUserProjectsProjectResolver,
    userProjectsProjects: actionResolvers.FindManyUserProjectsProjectResolver,
    createUserProjectsProject: actionResolvers.CreateUserProjectsProjectResolver,
    createManyUserProjectsProject: actionResolvers.CreateManyUserProjectsProjectResolver,
    deleteUserProjectsProject: actionResolvers.DeleteUserProjectsProjectResolver,
    updateUserProjectsProject: actionResolvers.UpdateUserProjectsProjectResolver,
    deleteManyUserProjectsProject: actionResolvers.DeleteManyUserProjectsProjectResolver,
    updateManyUserProjectsProject: actionResolvers.UpdateManyUserProjectsProjectResolver,
    upsertUserProjectsProject: actionResolvers.UpsertUserProjectsProjectResolver,
    aggregateUserProjectsProject: actionResolvers.AggregateUserProjectsProjectResolver,
    groupByUserProjectsProject: actionResolvers.GroupByUserProjectsProjectResolver
  },
  Wallet: {
    wallet: actionResolvers.FindUniqueWalletResolver,
    findFirstWallet: actionResolvers.FindFirstWalletResolver,
    wallets: actionResolvers.FindManyWalletResolver,
    createWallet: actionResolvers.CreateWalletResolver,
    createManyWallet: actionResolvers.CreateManyWalletResolver,
    deleteWallet: actionResolvers.DeleteWalletResolver,
    updateWallet: actionResolvers.UpdateWalletResolver,
    deleteManyWallet: actionResolvers.DeleteManyWalletResolver,
    updateManyWallet: actionResolvers.UpdateManyWalletResolver,
    upsertWallet: actionResolvers.UpsertWalletResolver,
    aggregateWallet: actionResolvers.AggregateWalletResolver,
    groupByWallet: actionResolvers.GroupByWalletResolver
  }
};
const crudResolversInfo = {
  AccountVerification: ["accountVerification", "findFirstAccountVerification", "accountVerifications", "createAccountVerification", "createManyAccountVerification", "deleteAccountVerification", "updateAccountVerification", "deleteManyAccountVerification", "updateManyAccountVerification", "upsertAccountVerification", "aggregateAccountVerification", "groupByAccountVerification"],
  BankAccount: ["bankAccount", "findFirstBankAccount", "bankAccounts", "createBankAccount", "createManyBankAccount", "deleteBankAccount", "updateBankAccount", "deleteManyBankAccount", "updateManyBankAccount", "upsertBankAccount", "aggregateBankAccount", "groupByBankAccount"],
  Category: ["category", "findFirstCategory", "categories", "createCategory", "createManyCategory", "deleteCategory", "updateCategory", "deleteManyCategory", "updateManyCategory", "upsertCategory", "aggregateCategory", "groupByCategory"],
  Donation: ["donation", "findFirstDonation", "donations", "createDonation", "createManyDonation", "deleteDonation", "updateDonation", "deleteManyDonation", "updateManyDonation", "upsertDonation", "aggregateDonation", "groupByDonation"],
  Organisation: ["organisation", "findFirstOrganisation", "organisations", "createOrganisation", "createManyOrganisation", "deleteOrganisation", "updateOrganisation", "deleteManyOrganisation", "updateManyOrganisation", "upsertOrganisation", "aggregateOrganisation", "groupByOrganisation"],
  OrganisationProjectsProject: ["organisationProjectsProject", "findFirstOrganisationProjectsProject", "organisationProjectsProjects", "createOrganisationProjectsProject", "createManyOrganisationProjectsProject", "deleteOrganisationProjectsProject", "updateOrganisationProjectsProject", "deleteManyOrganisationProjectsProject", "updateManyOrganisationProjectsProject", "upsertOrganisationProjectsProject", "aggregateOrganisationProjectsProject", "groupByOrganisationProjectsProject"],
  OrganisationUser: ["organisationUser", "findFirstOrganisationUser", "organisationUsers", "createOrganisationUser", "createManyOrganisationUser", "deleteOrganisationUser", "updateOrganisationUser", "deleteManyOrganisationUser", "updateManyOrganisationUser", "upsertOrganisationUser", "aggregateOrganisationUser", "groupByOrganisationUser"],
  OrganisationUsersUser: ["organisationUsersUser", "findFirstOrganisationUsersUser", "organisationUsersUsers", "createOrganisationUsersUser", "createManyOrganisationUsersUser", "deleteOrganisationUsersUser", "updateOrganisationUsersUser", "deleteManyOrganisationUsersUser", "updateManyOrganisationUsersUser", "upsertOrganisationUsersUser", "aggregateOrganisationUsersUser", "groupByOrganisationUsersUser"],
  Project: ["project", "findFirstProject", "projects", "createProject", "createManyProject", "deleteProject", "updateProject", "deleteManyProject", "updateManyProject", "upsertProject", "aggregateProject", "groupByProject"],
  ProjectCategoriesCategory: ["projectCategoriesCategory", "findFirstProjectCategoriesCategory", "projectCategoriesCategories", "createProjectCategoriesCategory", "createManyProjectCategoriesCategory", "deleteProjectCategoriesCategory", "updateProjectCategoriesCategory", "deleteManyProjectCategoriesCategory", "updateManyProjectCategoriesCategory", "upsertProjectCategoriesCategory", "aggregateProjectCategoriesCategory", "groupByProjectCategoriesCategory"],
  ProjectImage: ["projectImage", "findFirstProjectImage", "projectImages", "createProjectImage", "createManyProjectImage", "deleteProjectImage", "updateProjectImage", "deleteManyProjectImage", "updateManyProjectImage", "upsertProjectImage", "aggregateProjectImage", "groupByProjectImage"],
  ProjectOrganisationsOrganisation: ["projectOrganisationsOrganisation", "findFirstProjectOrganisationsOrganisation", "projectOrganisationsOrganisations", "createProjectOrganisationsOrganisation", "createManyProjectOrganisationsOrganisation", "deleteProjectOrganisationsOrganisation", "updateProjectOrganisationsOrganisation", "deleteManyProjectOrganisationsOrganisation", "updateManyProjectOrganisationsOrganisation", "upsertProjectOrganisationsOrganisation", "aggregateProjectOrganisationsOrganisation", "groupByProjectOrganisationsOrganisation"],
  ProjectStatus: ["projectStatus", "findFirstProjectStatus", "projectStatuses", "createProjectStatus", "createManyProjectStatus", "deleteProjectStatus", "updateProjectStatus", "deleteManyProjectStatus", "updateManyProjectStatus", "upsertProjectStatus", "aggregateProjectStatus", "groupByProjectStatus"],
  ProjectUpdate: ["projectUpdate", "findFirstProjectUpdate", "projectUpdates", "createProjectUpdate", "createManyProjectUpdate", "deleteProjectUpdate", "updateProjectUpdate", "deleteManyProjectUpdate", "updateManyProjectUpdate", "upsertProjectUpdate", "aggregateProjectUpdate", "groupByProjectUpdate"],
  ProjectUsersUser: ["projectUsersUser", "findFirstProjectUsersUser", "projectUsersUsers", "createProjectUsersUser", "createManyProjectUsersUser", "deleteProjectUsersUser", "updateProjectUsersUser", "deleteManyProjectUsersUser", "updateManyProjectUsersUser", "upsertProjectUsersUser", "aggregateProjectUsersUser", "groupByProjectUsersUser"],
  QueryResultCache: ["queryResultCache", "findFirstQueryResultCache", "queryResultCaches", "createQueryResultCache", "createManyQueryResultCache", "deleteQueryResultCache", "updateQueryResultCache", "deleteManyQueryResultCache", "updateManyQueryResultCache", "upsertQueryResultCache", "aggregateQueryResultCache", "groupByQueryResultCache"],
  Reaction: ["reaction", "findFirstReaction", "reactions", "createReaction", "createManyReaction", "deleteReaction", "updateReaction", "deleteManyReaction", "updateManyReaction", "upsertReaction", "aggregateReaction", "groupByReaction"],
  StripeTransaction: ["stripeTransaction", "findFirstStripeTransaction", "stripeTransactions", "createStripeTransaction", "createManyStripeTransaction", "deleteStripeTransaction", "updateStripeTransaction", "deleteManyStripeTransaction", "updateManyStripeTransaction", "upsertStripeTransaction", "aggregateStripeTransaction", "groupByStripeTransaction"],
  User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
  UserProjectsProject: ["userProjectsProject", "findFirstUserProjectsProject", "userProjectsProjects", "createUserProjectsProject", "createManyUserProjectsProject", "deleteUserProjectsProject", "updateUserProjectsProject", "deleteManyUserProjectsProject", "updateManyUserProjectsProject", "upsertUserProjectsProject", "aggregateUserProjectsProject", "groupByUserProjectsProject"],
  Wallet: ["wallet", "findFirstWallet", "wallets", "createWallet", "createManyWallet", "deleteWallet", "updateWallet", "deleteManyWallet", "updateManyWallet", "upsertWallet", "aggregateWallet", "groupByWallet"]
};
const argsInfo = {
  FindUniqueAccountVerificationArgs: ["where"],
  FindFirstAccountVerificationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyAccountVerificationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateAccountVerificationArgs: ["data"],
  CreateManyAccountVerificationArgs: ["data", "skipDuplicates"],
  DeleteAccountVerificationArgs: ["where"],
  UpdateAccountVerificationArgs: ["data", "where"],
  DeleteManyAccountVerificationArgs: ["where"],
  UpdateManyAccountVerificationArgs: ["data", "where"],
  UpsertAccountVerificationArgs: ["where", "create", "update"],
  AggregateAccountVerificationArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByAccountVerificationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueBankAccountArgs: ["where"],
  FindFirstBankAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyBankAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateBankAccountArgs: ["data"],
  CreateManyBankAccountArgs: ["data", "skipDuplicates"],
  DeleteBankAccountArgs: ["where"],
  UpdateBankAccountArgs: ["data", "where"],
  DeleteManyBankAccountArgs: ["where"],
  UpdateManyBankAccountArgs: ["data", "where"],
  UpsertBankAccountArgs: ["where", "create", "update"],
  AggregateBankAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByBankAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueCategoryArgs: ["where"],
  FindFirstCategoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCategoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateCategoryArgs: ["data"],
  CreateManyCategoryArgs: ["data", "skipDuplicates"],
  DeleteCategoryArgs: ["where"],
  UpdateCategoryArgs: ["data", "where"],
  DeleteManyCategoryArgs: ["where"],
  UpdateManyCategoryArgs: ["data", "where"],
  UpsertCategoryArgs: ["where", "create", "update"],
  AggregateCategoryArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByCategoryArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueDonationArgs: ["where"],
  FindFirstDonationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyDonationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateDonationArgs: ["data"],
  CreateManyDonationArgs: ["data", "skipDuplicates"],
  DeleteDonationArgs: ["where"],
  UpdateDonationArgs: ["data", "where"],
  DeleteManyDonationArgs: ["where"],
  UpdateManyDonationArgs: ["data", "where"],
  UpsertDonationArgs: ["where", "create", "update"],
  AggregateDonationArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByDonationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueOrganisationArgs: ["where"],
  FindFirstOrganisationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyOrganisationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateOrganisationArgs: ["data"],
  CreateManyOrganisationArgs: ["data", "skipDuplicates"],
  DeleteOrganisationArgs: ["where"],
  UpdateOrganisationArgs: ["data", "where"],
  DeleteManyOrganisationArgs: ["where"],
  UpdateManyOrganisationArgs: ["data", "where"],
  UpsertOrganisationArgs: ["where", "create", "update"],
  AggregateOrganisationArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByOrganisationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueOrganisationProjectsProjectArgs: ["where"],
  FindFirstOrganisationProjectsProjectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyOrganisationProjectsProjectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateOrganisationProjectsProjectArgs: ["data"],
  CreateManyOrganisationProjectsProjectArgs: ["data", "skipDuplicates"],
  DeleteOrganisationProjectsProjectArgs: ["where"],
  UpdateOrganisationProjectsProjectArgs: ["data", "where"],
  DeleteManyOrganisationProjectsProjectArgs: ["where"],
  UpdateManyOrganisationProjectsProjectArgs: ["data", "where"],
  UpsertOrganisationProjectsProjectArgs: ["where", "create", "update"],
  AggregateOrganisationProjectsProjectArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByOrganisationProjectsProjectArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueOrganisationUserArgs: ["where"],
  FindFirstOrganisationUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyOrganisationUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateOrganisationUserArgs: ["data"],
  CreateManyOrganisationUserArgs: ["data", "skipDuplicates"],
  DeleteOrganisationUserArgs: ["where"],
  UpdateOrganisationUserArgs: ["data", "where"],
  DeleteManyOrganisationUserArgs: ["where"],
  UpdateManyOrganisationUserArgs: ["data", "where"],
  UpsertOrganisationUserArgs: ["where", "create", "update"],
  AggregateOrganisationUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByOrganisationUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueOrganisationUsersUserArgs: ["where"],
  FindFirstOrganisationUsersUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyOrganisationUsersUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateOrganisationUsersUserArgs: ["data"],
  CreateManyOrganisationUsersUserArgs: ["data", "skipDuplicates"],
  DeleteOrganisationUsersUserArgs: ["where"],
  UpdateOrganisationUsersUserArgs: ["data", "where"],
  DeleteManyOrganisationUsersUserArgs: ["where"],
  UpdateManyOrganisationUsersUserArgs: ["data", "where"],
  UpsertOrganisationUsersUserArgs: ["where", "create", "update"],
  AggregateOrganisationUsersUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByOrganisationUsersUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueProjectArgs: ["where"],
  FindFirstProjectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyProjectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateProjectArgs: ["data"],
  CreateManyProjectArgs: ["data", "skipDuplicates"],
  DeleteProjectArgs: ["where"],
  UpdateProjectArgs: ["data", "where"],
  DeleteManyProjectArgs: ["where"],
  UpdateManyProjectArgs: ["data", "where"],
  UpsertProjectArgs: ["where", "create", "update"],
  AggregateProjectArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByProjectArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueProjectCategoriesCategoryArgs: ["where"],
  FindFirstProjectCategoriesCategoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyProjectCategoriesCategoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateProjectCategoriesCategoryArgs: ["data"],
  CreateManyProjectCategoriesCategoryArgs: ["data", "skipDuplicates"],
  DeleteProjectCategoriesCategoryArgs: ["where"],
  UpdateProjectCategoriesCategoryArgs: ["data", "where"],
  DeleteManyProjectCategoriesCategoryArgs: ["where"],
  UpdateManyProjectCategoriesCategoryArgs: ["data", "where"],
  UpsertProjectCategoriesCategoryArgs: ["where", "create", "update"],
  AggregateProjectCategoriesCategoryArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByProjectCategoriesCategoryArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueProjectImageArgs: ["where"],
  FindFirstProjectImageArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyProjectImageArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateProjectImageArgs: ["data"],
  CreateManyProjectImageArgs: ["data", "skipDuplicates"],
  DeleteProjectImageArgs: ["where"],
  UpdateProjectImageArgs: ["data", "where"],
  DeleteManyProjectImageArgs: ["where"],
  UpdateManyProjectImageArgs: ["data", "where"],
  UpsertProjectImageArgs: ["where", "create", "update"],
  AggregateProjectImageArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByProjectImageArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueProjectOrganisationsOrganisationArgs: ["where"],
  FindFirstProjectOrganisationsOrganisationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyProjectOrganisationsOrganisationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateProjectOrganisationsOrganisationArgs: ["data"],
  CreateManyProjectOrganisationsOrganisationArgs: ["data", "skipDuplicates"],
  DeleteProjectOrganisationsOrganisationArgs: ["where"],
  UpdateProjectOrganisationsOrganisationArgs: ["data", "where"],
  DeleteManyProjectOrganisationsOrganisationArgs: ["where"],
  UpdateManyProjectOrganisationsOrganisationArgs: ["data", "where"],
  UpsertProjectOrganisationsOrganisationArgs: ["where", "create", "update"],
  AggregateProjectOrganisationsOrganisationArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByProjectOrganisationsOrganisationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueProjectStatusArgs: ["where"],
  FindFirstProjectStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyProjectStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateProjectStatusArgs: ["data"],
  CreateManyProjectStatusArgs: ["data", "skipDuplicates"],
  DeleteProjectStatusArgs: ["where"],
  UpdateProjectStatusArgs: ["data", "where"],
  DeleteManyProjectStatusArgs: ["where"],
  UpdateManyProjectStatusArgs: ["data", "where"],
  UpsertProjectStatusArgs: ["where", "create", "update"],
  AggregateProjectStatusArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByProjectStatusArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueProjectUpdateArgs: ["where"],
  FindFirstProjectUpdateArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyProjectUpdateArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateProjectUpdateArgs: ["data"],
  CreateManyProjectUpdateArgs: ["data", "skipDuplicates"],
  DeleteProjectUpdateArgs: ["where"],
  UpdateProjectUpdateArgs: ["data", "where"],
  DeleteManyProjectUpdateArgs: ["where"],
  UpdateManyProjectUpdateArgs: ["data", "where"],
  UpsertProjectUpdateArgs: ["where", "create", "update"],
  AggregateProjectUpdateArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByProjectUpdateArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueProjectUsersUserArgs: ["where"],
  FindFirstProjectUsersUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyProjectUsersUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateProjectUsersUserArgs: ["data"],
  CreateManyProjectUsersUserArgs: ["data", "skipDuplicates"],
  DeleteProjectUsersUserArgs: ["where"],
  UpdateProjectUsersUserArgs: ["data", "where"],
  DeleteManyProjectUsersUserArgs: ["where"],
  UpdateManyProjectUsersUserArgs: ["data", "where"],
  UpsertProjectUsersUserArgs: ["where", "create", "update"],
  AggregateProjectUsersUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByProjectUsersUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueQueryResultCacheArgs: ["where"],
  FindFirstQueryResultCacheArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyQueryResultCacheArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateQueryResultCacheArgs: ["data"],
  CreateManyQueryResultCacheArgs: ["data", "skipDuplicates"],
  DeleteQueryResultCacheArgs: ["where"],
  UpdateQueryResultCacheArgs: ["data", "where"],
  DeleteManyQueryResultCacheArgs: ["where"],
  UpdateManyQueryResultCacheArgs: ["data", "where"],
  UpsertQueryResultCacheArgs: ["where", "create", "update"],
  AggregateQueryResultCacheArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByQueryResultCacheArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueReactionArgs: ["where"],
  FindFirstReactionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyReactionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateReactionArgs: ["data"],
  CreateManyReactionArgs: ["data", "skipDuplicates"],
  DeleteReactionArgs: ["where"],
  UpdateReactionArgs: ["data", "where"],
  DeleteManyReactionArgs: ["where"],
  UpdateManyReactionArgs: ["data", "where"],
  UpsertReactionArgs: ["where", "create", "update"],
  AggregateReactionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByReactionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueStripeTransactionArgs: ["where"],
  FindFirstStripeTransactionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyStripeTransactionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateStripeTransactionArgs: ["data"],
  CreateManyStripeTransactionArgs: ["data", "skipDuplicates"],
  DeleteStripeTransactionArgs: ["where"],
  UpdateStripeTransactionArgs: ["data", "where"],
  DeleteManyStripeTransactionArgs: ["where"],
  UpdateManyStripeTransactionArgs: ["data", "where"],
  UpsertStripeTransactionArgs: ["where", "create", "update"],
  AggregateStripeTransactionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByStripeTransactionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueUserArgs: ["where"],
  FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateUserArgs: ["data"],
  CreateManyUserArgs: ["data", "skipDuplicates"],
  DeleteUserArgs: ["where"],
  UpdateUserArgs: ["data", "where"],
  DeleteManyUserArgs: ["where"],
  UpdateManyUserArgs: ["data", "where"],
  UpsertUserArgs: ["where", "create", "update"],
  AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueUserProjectsProjectArgs: ["where"],
  FindFirstUserProjectsProjectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyUserProjectsProjectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateUserProjectsProjectArgs: ["data"],
  CreateManyUserProjectsProjectArgs: ["data", "skipDuplicates"],
  DeleteUserProjectsProjectArgs: ["where"],
  UpdateUserProjectsProjectArgs: ["data", "where"],
  DeleteManyUserProjectsProjectArgs: ["where"],
  UpdateManyUserProjectsProjectArgs: ["data", "where"],
  UpsertUserProjectsProjectArgs: ["where", "create", "update"],
  AggregateUserProjectsProjectArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByUserProjectsProjectArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueWalletArgs: ["where"],
  FindFirstWalletArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyWalletArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateWalletArgs: ["data"],
  CreateManyWalletArgs: ["data", "skipDuplicates"],
  DeleteWalletArgs: ["where"],
  UpdateWalletArgs: ["data", "where"],
  DeleteManyWalletArgs: ["where"],
  UpdateManyWalletArgs: ["data", "where"],
  UpsertWalletArgs: ["where", "create", "update"],
  AggregateWalletArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByWalletArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};

type ResolverModelNames = keyof typeof crudResolversMap;

type ModelResolverActionNames<
  TModel extends ResolverModelNames
  > = keyof typeof crudResolversMap[TModel]["prototype"];

export type ResolverActionsConfig<
  TModel extends ResolverModelNames
  > = Partial<Record<ModelResolverActionNames<TModel> | "_all", MethodDecorator[]>>;

export type ResolversEnhanceMap = {
  [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};

export function applyResolversEnhanceMap(
  resolversEnhanceMap: ResolversEnhanceMap,
) {
  for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
    const modelName = resolversEnhanceMapKey as keyof typeof resolversEnhanceMap;
    const crudTarget = crudResolversMap[modelName].prototype;
    const resolverActionsConfig = resolversEnhanceMap[modelName]!;
    const actionResolversConfig = actionResolversMap[modelName];
    if (resolverActionsConfig._all) {
      const allActionsDecorators = resolverActionsConfig._all;
      const resolverActionNames = crudResolversInfo[modelName as keyof typeof crudResolversInfo];
      for (const resolverActionName of resolverActionNames) {
        const actionTarget = (actionResolversConfig[
          resolverActionName as keyof typeof actionResolversConfig
        ] as Function).prototype;
        tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
        tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
      }
    }
    const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(
      it => it !== "_all"
    );
    for (const resolverActionName of resolverActionsToApply) {
      const decorators = resolverActionsConfig[
        resolverActionName as keyof typeof resolverActionsConfig
      ] as MethodDecorator[];
      const actionTarget = (actionResolversConfig[
        resolverActionName as keyof typeof actionResolversConfig
      ] as Function).prototype;
      tslib.__decorate(decorators, crudTarget, resolverActionName, null);
      tslib.__decorate(decorators, actionTarget, resolverActionName, null);
    }
  }
}

type ArgsTypesNames = keyof typeof argsTypes;

type ArgFieldNames<TArgsType extends ArgsTypesNames> = Exclude<
  keyof typeof argsTypes[TArgsType]["prototype"],
  number | symbol
>;

type ArgFieldsConfig<
  TArgsType extends ArgsTypesNames
  > = FieldsConfig<ArgFieldNames<TArgsType>>;

export type ArgConfig<TArgsType extends ArgsTypesNames> = {
  class?: ClassDecorator[];
  fields?: ArgFieldsConfig<TArgsType>;
};

export type ArgsTypesEnhanceMap = {
  [TArgsType in ArgsTypesNames]?: ArgConfig<TArgsType>;
};

export function applyArgsTypesEnhanceMap(
  argsTypesEnhanceMap: ArgsTypesEnhanceMap,
) {
  for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
    const argsTypeName = argsTypesEnhanceMapKey as keyof typeof argsTypesEnhanceMap;
    const typeConfig = argsTypesEnhanceMap[argsTypeName]!;
    const typeClass = argsTypes[argsTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      argsInfo[argsTypeName as keyof typeof argsInfo],
    );
  }
}

const relationResolversMap = {
  AccountVerification: relationResolvers.AccountVerificationRelationsResolver,
  Category: relationResolvers.CategoryRelationsResolver,
  Donation: relationResolvers.DonationRelationsResolver,
  Organisation: relationResolvers.OrganisationRelationsResolver,
  OrganisationProjectsProject: relationResolvers.OrganisationProjectsProjectRelationsResolver,
  OrganisationUser: relationResolvers.OrganisationUserRelationsResolver,
  OrganisationUsersUser: relationResolvers.OrganisationUsersUserRelationsResolver,
  Project: relationResolvers.ProjectRelationsResolver,
  ProjectCategoriesCategory: relationResolvers.ProjectCategoriesCategoryRelationsResolver,
  ProjectImage: relationResolvers.ProjectImageRelationsResolver,
  ProjectOrganisationsOrganisation: relationResolvers.ProjectOrganisationsOrganisationRelationsResolver,
  ProjectStatus: relationResolvers.ProjectStatusRelationsResolver,
  ProjectUsersUser: relationResolvers.ProjectUsersUserRelationsResolver,
  Reaction: relationResolvers.ReactionRelationsResolver,
  User: relationResolvers.UserRelationsResolver,
  UserProjectsProject: relationResolvers.UserProjectsProjectRelationsResolver,
  Wallet: relationResolvers.WalletRelationsResolver
};
const relationResolversInfo = {
  AccountVerification: ["user"],
  Category: ["project_categories_category"],
  Donation: ["project", "user"],
  Organisation: ["organisation_projects_project", "organisation_user", "organisation_users_user", "project_organisations_organisation"],
  OrganisationProjectsProject: ["organisation", "project"],
  OrganisationUser: ["organisation", "user"],
  OrganisationUsersUser: ["organisation", "user"],
  Project: ["project_status", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  ProjectCategoriesCategory: ["category", "project"],
  ProjectImage: ["project"],
  ProjectOrganisationsOrganisation: ["organisation", "project"],
  ProjectStatus: ["project"],
  ProjectUsersUser: ["project", "user"],
  Reaction: ["project"],
  User: ["account_verification", "donation", "organisation_user", "organisation_users_user", "project_users_user", "user_projects_project", "wallet"],
  UserProjectsProject: ["project", "user"],
  Wallet: ["user"]
};

type RelationResolverModelNames = keyof typeof relationResolversMap;

type RelationResolverActionNames<
  TModel extends RelationResolverModelNames
  > = keyof typeof relationResolversMap[TModel]["prototype"];

export type RelationResolverActionsConfig<TModel extends RelationResolverModelNames>
  = Partial<Record<RelationResolverActionNames<TModel> | "_all", MethodDecorator[]>>;

export type RelationResolversEnhanceMap = {
  [TModel in RelationResolverModelNames]?: RelationResolverActionsConfig<TModel>;
};

export function applyRelationResolversEnhanceMap(
  relationResolversEnhanceMap: RelationResolversEnhanceMap,
) {
  for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
    const modelName = relationResolversEnhanceMapKey as keyof typeof relationResolversEnhanceMap;
    const relationResolverTarget = relationResolversMap[modelName].prototype;
    const relationResolverActionsConfig = relationResolversEnhanceMap[modelName]!;
    if (relationResolverActionsConfig._all) {
      const allActionsDecorators = relationResolverActionsConfig._all;
      const relationResolverActionNames = relationResolversInfo[modelName as keyof typeof relationResolversInfo];
      for (const relationResolverActionName of relationResolverActionNames) {
        tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
      }
    }
    const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(
      it => it !== "_all"
    );
    for (const relationResolverActionName of relationResolverActionsToApply) {
      const decorators = relationResolverActionsConfig[
        relationResolverActionName as keyof typeof relationResolverActionsConfig
      ] as MethodDecorator[];
      tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
    }
  }
}

type TypeConfig = {
  class?: ClassDecorator[];
  fields?: FieldsConfig;
};

type FieldsConfig<TTypeKeys extends string = string> = Partial<
  Record<TTypeKeys | "_all", PropertyDecorator[]>
>;

function applyTypeClassEnhanceConfig<
  TEnhanceConfig extends TypeConfig,
  TType extends object
>(
  enhanceConfig: TEnhanceConfig,
  typeClass: ClassType<TType>,
  typePrototype: TType,
  typeFieldNames: string[]
) {
  if (enhanceConfig.class) {
    tslib.__decorate(enhanceConfig.class, typeClass);
  }
  if (enhanceConfig.fields) {
    if (enhanceConfig.fields._all) {
      const allFieldsDecorators = enhanceConfig.fields._all;
      for (const typeFieldName of typeFieldNames) {
        tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
      }
    }
    const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(
      it => it !== "_all"
    );
    for (const typeFieldName of configFieldsToApply) {
      const fieldDecorators = enhanceConfig.fields[typeFieldName]!;
      tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
    }
  }
}

const modelsInfo = {
  AccountVerification: ["id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "userId"],
  BankAccount: ["id", "projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status"],
  Category: ["id", "name", "value", "source"],
  Donation: ["id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "userId", "tokenAddress"],
  Organisation: ["id", "title", "description"],
  OrganisationProjectsProject: ["organisationId", "projectId"],
  OrganisationUser: ["id", "role", "organisationId", "userId"],
  OrganisationUsersUser: ["organisationId", "userId"],
  Project: ["id", "title", "slug", "slugHistory", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "statusId", "givingBlocksId", "website", "youtube"],
  ProjectCategoriesCategory: ["projectId", "categoryId"],
  ProjectImage: ["id", "projectId", "url"],
  ProjectOrganisationsOrganisation: ["projectId", "organisationId"],
  ProjectStatus: ["id", "symbol", "name", "description"],
  ProjectUpdate: ["id", "title", "projectId", "userId", "content", "createdAt", "isMain"],
  ProjectUsersUser: ["projectId", "userId"],
  QueryResultCache: ["id", "identifier", "time", "duration", "query", "result"],
  Reaction: ["id", "projectUpdateId", "userId", "reaction", "projectId"],
  StripeTransaction: ["id", "projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency"],
  User: ["id", "role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified"],
  UserProjectsProject: ["userId", "projectId"],
  Wallet: ["id", "address", "userId"]
};

type ModelNames = keyof typeof models;

type ModelFieldNames<TModel extends ModelNames> = Exclude<
  keyof typeof models[TModel]["prototype"],
  number | symbol
>;

type ModelFieldsConfig<TModel extends ModelNames> = FieldsConfig<
  ModelFieldNames<TModel>
>;

export type ModelConfig<TModel extends ModelNames> = {
  class?: ClassDecorator[];
  fields?: ModelFieldsConfig<TModel>;
};

export type ModelsEnhanceMap = {
  [TModel in ModelNames]?: ModelConfig<TModel>;
};

export function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap) {
  for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
    const modelName = modelsEnhanceMapKey as keyof typeof modelsEnhanceMap;
    const modelConfig = modelsEnhanceMap[modelName]!;
    const modelClass = models[modelName];
    const modelTarget = modelClass.prototype;
    applyTypeClassEnhanceConfig(
      modelConfig,
      modelClass,
      modelTarget,
      modelsInfo[modelName as keyof typeof modelsInfo],
    );
  }
}

const outputsInfo = {
  AggregateAccountVerification: ["_count", "_avg", "_sum", "_min", "_max"],
  AccountVerificationGroupBy: ["id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "userId", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateBankAccount: ["_count", "_avg", "_sum", "_min", "_max"],
  BankAccountGroupBy: ["id", "projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateCategory: ["_count", "_avg", "_sum", "_min", "_max"],
  CategoryGroupBy: ["id", "name", "value", "source", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateDonation: ["_count", "_avg", "_sum", "_min", "_max"],
  DonationGroupBy: ["id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "userId", "tokenAddress", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateOrganisation: ["_count", "_avg", "_sum", "_min", "_max"],
  OrganisationGroupBy: ["id", "title", "description", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateOrganisationProjectsProject: ["_count", "_avg", "_sum", "_min", "_max"],
  OrganisationProjectsProjectGroupBy: ["organisationId", "projectId", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateOrganisationUser: ["_count", "_avg", "_sum", "_min", "_max"],
  OrganisationUserGroupBy: ["id", "role", "organisationId", "userId", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateOrganisationUsersUser: ["_count", "_avg", "_sum", "_min", "_max"],
  OrganisationUsersUserGroupBy: ["organisationId", "userId", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateProject: ["_count", "_avg", "_sum", "_min", "_max"],
  ProjectGroupBy: ["id", "title", "slug", "slugHistory", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "statusId", "givingBlocksId", "website", "youtube", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateProjectCategoriesCategory: ["_count", "_avg", "_sum", "_min", "_max"],
  ProjectCategoriesCategoryGroupBy: ["projectId", "categoryId", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateProjectImage: ["_count", "_avg", "_sum", "_min", "_max"],
  ProjectImageGroupBy: ["id", "projectId", "url", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateProjectOrganisationsOrganisation: ["_count", "_avg", "_sum", "_min", "_max"],
  ProjectOrganisationsOrganisationGroupBy: ["projectId", "organisationId", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateProjectStatus: ["_count", "_avg", "_sum", "_min", "_max"],
  ProjectStatusGroupBy: ["id", "symbol", "name", "description", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateProjectUpdate: ["_count", "_avg", "_sum", "_min", "_max"],
  ProjectUpdateGroupBy: ["id", "title", "projectId", "userId", "content", "createdAt", "isMain", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateProjectUsersUser: ["_count", "_avg", "_sum", "_min", "_max"],
  ProjectUsersUserGroupBy: ["projectId", "userId", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateQueryResultCache: ["_count", "_avg", "_sum", "_min", "_max"],
  QueryResultCacheGroupBy: ["id", "identifier", "time", "duration", "query", "result", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateReaction: ["_count", "_avg", "_sum", "_min", "_max"],
  ReactionGroupBy: ["id", "projectUpdateId", "userId", "reaction", "projectId", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateStripeTransaction: ["_count", "_avg", "_sum", "_min", "_max"],
  StripeTransactionGroupBy: ["id", "projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateUser: ["_count", "_avg", "_sum", "_min", "_max"],
  UserGroupBy: ["id", "role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateUserProjectsProject: ["_count", "_avg", "_sum", "_min", "_max"],
  UserProjectsProjectGroupBy: ["userId", "projectId", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateWallet: ["_count", "_avg", "_sum", "_min", "_max"],
  WalletGroupBy: ["id", "address", "userId", "_count", "_avg", "_sum", "_min", "_max"],
  AffectedRowsOutput: ["count"],
  AccountVerificationCountAggregate: ["id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "userId", "_all"],
  AccountVerificationAvgAggregate: ["id", "userId"],
  AccountVerificationSumAggregate: ["id", "userId"],
  AccountVerificationMinAggregate: ["id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "userId"],
  AccountVerificationMaxAggregate: ["id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "userId"],
  BankAccountCountAggregate: ["id", "projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status", "_all"],
  BankAccountAvgAggregate: ["id", "projectId"],
  BankAccountSumAggregate: ["id", "projectId"],
  BankAccountMinAggregate: ["id", "projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status"],
  BankAccountMaxAggregate: ["id", "projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status"],
  CategoryCount: ["project_categories_category"],
  CategoryCountAggregate: ["id", "name", "value", "source", "_all"],
  CategoryAvgAggregate: ["id"],
  CategorySumAggregate: ["id"],
  CategoryMinAggregate: ["id", "name", "value", "source"],
  CategoryMaxAggregate: ["id", "name", "value", "source"],
  DonationCountAggregate: ["id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "userId", "tokenAddress", "_all"],
  DonationAvgAggregate: ["id", "nonce", "transactionNetworkId", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "projectId", "userId"],
  DonationSumAggregate: ["id", "nonce", "transactionNetworkId", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "projectId", "userId"],
  DonationMinAggregate: ["id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "userId", "tokenAddress"],
  DonationMaxAggregate: ["id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "userId", "tokenAddress"],
  OrganisationCount: ["organisation_projects_project", "organisation_user", "organisation_users_user", "project_organisations_organisation"],
  OrganisationCountAggregate: ["id", "title", "description", "_all"],
  OrganisationAvgAggregate: ["id"],
  OrganisationSumAggregate: ["id"],
  OrganisationMinAggregate: ["id", "title", "description"],
  OrganisationMaxAggregate: ["id", "title", "description"],
  OrganisationProjectsProjectCountAggregate: ["organisationId", "projectId", "_all"],
  OrganisationProjectsProjectAvgAggregate: ["organisationId", "projectId"],
  OrganisationProjectsProjectSumAggregate: ["organisationId", "projectId"],
  OrganisationProjectsProjectMinAggregate: ["organisationId", "projectId"],
  OrganisationProjectsProjectMaxAggregate: ["organisationId", "projectId"],
  OrganisationUserCountAggregate: ["id", "role", "organisationId", "userId", "_all"],
  OrganisationUserAvgAggregate: ["id", "organisationId", "userId"],
  OrganisationUserSumAggregate: ["id", "organisationId", "userId"],
  OrganisationUserMinAggregate: ["id", "role", "organisationId", "userId"],
  OrganisationUserMaxAggregate: ["id", "role", "organisationId", "userId"],
  OrganisationUsersUserCountAggregate: ["organisationId", "userId", "_all"],
  OrganisationUsersUserAvgAggregate: ["organisationId", "userId"],
  OrganisationUsersUserSumAggregate: ["organisationId", "userId"],
  OrganisationUsersUserMinAggregate: ["organisationId", "userId"],
  OrganisationUsersUserMaxAggregate: ["organisationId", "userId"],
  ProjectCount: ["donation", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  ProjectCountAggregate: ["id", "title", "slug", "slugHistory", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "statusId", "givingBlocksId", "website", "youtube", "_all"],
  ProjectAvgAggregate: ["id", "organisationId", "balance", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "statusId"],
  ProjectSumAggregate: ["id", "organisationId", "balance", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "statusId"],
  ProjectMinAggregate: ["id", "title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "statusId", "givingBlocksId", "website", "youtube"],
  ProjectMaxAggregate: ["id", "title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "statusId", "givingBlocksId", "website", "youtube"],
  ProjectCategoriesCategoryCountAggregate: ["projectId", "categoryId", "_all"],
  ProjectCategoriesCategoryAvgAggregate: ["projectId", "categoryId"],
  ProjectCategoriesCategorySumAggregate: ["projectId", "categoryId"],
  ProjectCategoriesCategoryMinAggregate: ["projectId", "categoryId"],
  ProjectCategoriesCategoryMaxAggregate: ["projectId", "categoryId"],
  ProjectImageCountAggregate: ["id", "projectId", "url", "_all"],
  ProjectImageAvgAggregate: ["id", "projectId"],
  ProjectImageSumAggregate: ["id", "projectId"],
  ProjectImageMinAggregate: ["id", "projectId", "url"],
  ProjectImageMaxAggregate: ["id", "projectId", "url"],
  ProjectOrganisationsOrganisationCountAggregate: ["projectId", "organisationId", "_all"],
  ProjectOrganisationsOrganisationAvgAggregate: ["projectId", "organisationId"],
  ProjectOrganisationsOrganisationSumAggregate: ["projectId", "organisationId"],
  ProjectOrganisationsOrganisationMinAggregate: ["projectId", "organisationId"],
  ProjectOrganisationsOrganisationMaxAggregate: ["projectId", "organisationId"],
  ProjectStatusCount: ["project"],
  ProjectStatusCountAggregate: ["id", "symbol", "name", "description", "_all"],
  ProjectStatusAvgAggregate: ["id"],
  ProjectStatusSumAggregate: ["id"],
  ProjectStatusMinAggregate: ["id", "symbol", "name", "description"],
  ProjectStatusMaxAggregate: ["id", "symbol", "name", "description"],
  ProjectUpdateCountAggregate: ["id", "title", "projectId", "userId", "content", "createdAt", "isMain", "_all"],
  ProjectUpdateAvgAggregate: ["id", "projectId", "userId"],
  ProjectUpdateSumAggregate: ["id", "projectId", "userId"],
  ProjectUpdateMinAggregate: ["id", "title", "projectId", "userId", "content", "createdAt", "isMain"],
  ProjectUpdateMaxAggregate: ["id", "title", "projectId", "userId", "content", "createdAt", "isMain"],
  ProjectUsersUserCountAggregate: ["projectId", "userId", "_all"],
  ProjectUsersUserAvgAggregate: ["projectId", "userId"],
  ProjectUsersUserSumAggregate: ["projectId", "userId"],
  ProjectUsersUserMinAggregate: ["projectId", "userId"],
  ProjectUsersUserMaxAggregate: ["projectId", "userId"],
  QueryResultCacheCountAggregate: ["id", "identifier", "time", "duration", "query", "result", "_all"],
  QueryResultCacheAvgAggregate: ["id", "time", "duration"],
  QueryResultCacheSumAggregate: ["id", "time", "duration"],
  QueryResultCacheMinAggregate: ["id", "identifier", "time", "duration", "query", "result"],
  QueryResultCacheMaxAggregate: ["id", "identifier", "time", "duration", "query", "result"],
  ReactionCountAggregate: ["id", "projectUpdateId", "userId", "reaction", "projectId", "_all"],
  ReactionAvgAggregate: ["id", "projectUpdateId", "userId", "projectId"],
  ReactionSumAggregate: ["id", "projectUpdateId", "userId", "projectId"],
  ReactionMinAggregate: ["id", "projectUpdateId", "userId", "reaction", "projectId"],
  ReactionMaxAggregate: ["id", "projectUpdateId", "userId", "reaction", "projectId"],
  StripeTransactionCountAggregate: ["id", "projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency", "_all"],
  StripeTransactionAvgAggregate: ["id", "projectId", "amount"],
  StripeTransactionSumAggregate: ["id", "projectId", "amount"],
  StripeTransactionMinAggregate: ["id", "projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency"],
  StripeTransactionMaxAggregate: ["id", "projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency"],
  UserCount: ["account_verification", "donation", "organisation_user", "organisation_users_user", "project_users_user", "user_projects_project", "wallet"],
  UserCountAggregate: ["id", "role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "_all"],
  UserAvgAggregate: ["id"],
  UserSumAggregate: ["id"],
  UserMinAggregate: ["id", "role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified"],
  UserMaxAggregate: ["id", "role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified"],
  UserProjectsProjectCountAggregate: ["userId", "projectId", "_all"],
  UserProjectsProjectAvgAggregate: ["userId", "projectId"],
  UserProjectsProjectSumAggregate: ["userId", "projectId"],
  UserProjectsProjectMinAggregate: ["userId", "projectId"],
  UserProjectsProjectMaxAggregate: ["userId", "projectId"],
  WalletCountAggregate: ["id", "address", "userId", "_all"],
  WalletAvgAggregate: ["id", "userId"],
  WalletSumAggregate: ["id", "userId"],
  WalletMinAggregate: ["id", "address", "userId"],
  WalletMaxAggregate: ["id", "address", "userId"]
};

type OutputTypesNames = keyof typeof outputTypes;

type OutputTypeFieldNames<TOutput extends OutputTypesNames> = Exclude<
  keyof typeof outputTypes[TOutput]["prototype"],
  number | symbol
>;

type OutputTypeFieldsConfig<
  TOutput extends OutputTypesNames
  > = FieldsConfig<OutputTypeFieldNames<TOutput>>;

export type OutputTypeConfig<TOutput extends OutputTypesNames> = {
  class?: ClassDecorator[];
  fields?: OutputTypeFieldsConfig<TOutput>;
};

export type OutputTypesEnhanceMap = {
  [TOutput in OutputTypesNames]?: OutputTypeConfig<TOutput>;
};

export function applyOutputTypesEnhanceMap(
  outputTypesEnhanceMap: OutputTypesEnhanceMap,
) {
  for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
    const outputTypeName = outputTypeEnhanceMapKey as keyof typeof outputTypesEnhanceMap;
    const typeConfig = outputTypesEnhanceMap[outputTypeName]!;
    const typeClass = outputTypes[outputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      outputsInfo[outputTypeName as keyof typeof outputsInfo],
    );
  }
}

const inputsInfo = {
  AccountVerificationWhereInput: ["AND", "OR", "NOT", "id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "userId", "user"],
  AccountVerificationOrderByWithRelationInput: ["id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "userId", "user"],
  AccountVerificationWhereUniqueInput: ["id"],
  AccountVerificationOrderByWithAggregationInput: ["id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "userId", "_count", "_avg", "_max", "_min", "_sum"],
  AccountVerificationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "userId"],
  BankAccountWhereInput: ["AND", "OR", "NOT", "id", "projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status"],
  BankAccountOrderByWithRelationInput: ["id", "projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status"],
  BankAccountWhereUniqueInput: ["id"],
  BankAccountOrderByWithAggregationInput: ["id", "projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status", "_count", "_avg", "_max", "_min", "_sum"],
  BankAccountScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status"],
  CategoryWhereInput: ["AND", "OR", "NOT", "id", "name", "value", "source", "project_categories_category"],
  CategoryOrderByWithRelationInput: ["id", "name", "value", "source", "project_categories_category"],
  CategoryWhereUniqueInput: ["id", "name"],
  CategoryOrderByWithAggregationInput: ["id", "name", "value", "source", "_count", "_avg", "_max", "_min", "_sum"],
  CategoryScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "value", "source"],
  DonationWhereInput: ["AND", "OR", "NOT", "id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "userId", "tokenAddress", "project", "user"],
  DonationOrderByWithRelationInput: ["id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "userId", "tokenAddress", "project", "user"],
  DonationWhereUniqueInput: ["id", "transactionId"],
  DonationOrderByWithAggregationInput: ["id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "userId", "tokenAddress", "_count", "_avg", "_max", "_min", "_sum"],
  DonationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "userId", "tokenAddress"],
  OrganisationWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "organisation_projects_project", "organisation_user", "organisation_users_user", "project_organisations_organisation"],
  OrganisationOrderByWithRelationInput: ["id", "title", "description", "organisation_projects_project", "organisation_user", "organisation_users_user", "project_organisations_organisation"],
  OrganisationWhereUniqueInput: ["id"],
  OrganisationOrderByWithAggregationInput: ["id", "title", "description", "_count", "_avg", "_max", "_min", "_sum"],
  OrganisationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "description"],
  OrganisationProjectsProjectWhereInput: ["AND", "OR", "NOT", "organisationId", "projectId", "organisation", "project"],
  OrganisationProjectsProjectOrderByWithRelationInput: ["organisationId", "projectId", "organisation", "project"],
  OrganisationProjectsProjectWhereUniqueInput: ["organisationId_projectId"],
  OrganisationProjectsProjectOrderByWithAggregationInput: ["organisationId", "projectId", "_count", "_avg", "_max", "_min", "_sum"],
  OrganisationProjectsProjectScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "organisationId", "projectId"],
  OrganisationUserWhereInput: ["AND", "OR", "NOT", "id", "role", "organisationId", "userId", "organisation", "user"],
  OrganisationUserOrderByWithRelationInput: ["id", "role", "organisationId", "userId", "organisation", "user"],
  OrganisationUserWhereUniqueInput: ["id"],
  OrganisationUserOrderByWithAggregationInput: ["id", "role", "organisationId", "userId", "_count", "_avg", "_max", "_min", "_sum"],
  OrganisationUserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "role", "organisationId", "userId"],
  OrganisationUsersUserWhereInput: ["AND", "OR", "NOT", "organisationId", "userId", "organisation", "user"],
  OrganisationUsersUserOrderByWithRelationInput: ["organisationId", "userId", "organisation", "user"],
  OrganisationUsersUserWhereUniqueInput: ["organisationId_userId"],
  OrganisationUsersUserOrderByWithAggregationInput: ["organisationId", "userId", "_count", "_avg", "_max", "_min", "_sum"],
  OrganisationUsersUserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "organisationId", "userId"],
  ProjectWhereInput: ["AND", "OR", "NOT", "id", "title", "slug", "slugHistory", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "statusId", "givingBlocksId", "website", "youtube", "project_status", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  ProjectOrderByWithRelationInput: ["id", "title", "slug", "slugHistory", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "statusId", "givingBlocksId", "website", "youtube", "project_status", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  ProjectWhereUniqueInput: ["id", "walletAddress"],
  ProjectOrderByWithAggregationInput: ["id", "title", "slug", "slugHistory", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "statusId", "givingBlocksId", "website", "youtube", "_count", "_avg", "_max", "_min", "_sum"],
  ProjectScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "slug", "slugHistory", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "statusId", "givingBlocksId", "website", "youtube"],
  ProjectCategoriesCategoryWhereInput: ["AND", "OR", "NOT", "projectId", "categoryId", "category", "project"],
  ProjectCategoriesCategoryOrderByWithRelationInput: ["projectId", "categoryId", "category", "project"],
  ProjectCategoriesCategoryWhereUniqueInput: ["projectId_categoryId"],
  ProjectCategoriesCategoryOrderByWithAggregationInput: ["projectId", "categoryId", "_count", "_avg", "_max", "_min", "_sum"],
  ProjectCategoriesCategoryScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "projectId", "categoryId"],
  ProjectImageWhereInput: ["AND", "OR", "NOT", "id", "projectId", "url", "project"],
  ProjectImageOrderByWithRelationInput: ["id", "projectId", "url", "project"],
  ProjectImageWhereUniqueInput: ["id"],
  ProjectImageOrderByWithAggregationInput: ["id", "projectId", "url", "_count", "_avg", "_max", "_min", "_sum"],
  ProjectImageScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "projectId", "url"],
  ProjectOrganisationsOrganisationWhereInput: ["AND", "OR", "NOT", "projectId", "organisationId", "organisation", "project"],
  ProjectOrganisationsOrganisationOrderByWithRelationInput: ["projectId", "organisationId", "organisation", "project"],
  ProjectOrganisationsOrganisationWhereUniqueInput: ["projectId_organisationId"],
  ProjectOrganisationsOrganisationOrderByWithAggregationInput: ["projectId", "organisationId", "_count", "_avg", "_max", "_min", "_sum"],
  ProjectOrganisationsOrganisationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "projectId", "organisationId"],
  ProjectStatusWhereInput: ["AND", "OR", "NOT", "id", "symbol", "name", "description", "project"],
  ProjectStatusOrderByWithRelationInput: ["id", "symbol", "name", "description", "project"],
  ProjectStatusWhereUniqueInput: ["id", "symbol"],
  ProjectStatusOrderByWithAggregationInput: ["id", "symbol", "name", "description", "_count", "_avg", "_max", "_min", "_sum"],
  ProjectStatusScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "symbol", "name", "description"],
  ProjectUpdateWhereInput: ["AND", "OR", "NOT", "id", "title", "projectId", "userId", "content", "createdAt", "isMain"],
  ProjectUpdateOrderByWithRelationInput: ["id", "title", "projectId", "userId", "content", "createdAt", "isMain"],
  ProjectUpdateWhereUniqueInput: ["id"],
  ProjectUpdateOrderByWithAggregationInput: ["id", "title", "projectId", "userId", "content", "createdAt", "isMain", "_count", "_avg", "_max", "_min", "_sum"],
  ProjectUpdateScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "projectId", "userId", "content", "createdAt", "isMain"],
  ProjectUsersUserWhereInput: ["AND", "OR", "NOT", "projectId", "userId", "project", "user"],
  ProjectUsersUserOrderByWithRelationInput: ["projectId", "userId", "project", "user"],
  ProjectUsersUserWhereUniqueInput: ["projectId_userId"],
  ProjectUsersUserOrderByWithAggregationInput: ["projectId", "userId", "_count", "_avg", "_max", "_min", "_sum"],
  ProjectUsersUserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "projectId", "userId"],
  QueryResultCacheWhereInput: ["AND", "OR", "NOT", "id", "identifier", "time", "duration", "query", "result"],
  QueryResultCacheOrderByWithRelationInput: ["id", "identifier", "time", "duration", "query", "result"],
  QueryResultCacheWhereUniqueInput: ["id"],
  QueryResultCacheOrderByWithAggregationInput: ["id", "identifier", "time", "duration", "query", "result", "_count", "_avg", "_max", "_min", "_sum"],
  QueryResultCacheScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "identifier", "time", "duration", "query", "result"],
  ReactionWhereInput: ["AND", "OR", "NOT", "id", "projectUpdateId", "userId", "reaction", "projectId", "project"],
  ReactionOrderByWithRelationInput: ["id", "projectUpdateId", "userId", "reaction", "projectId", "project"],
  ReactionWhereUniqueInput: ["id"],
  ReactionOrderByWithAggregationInput: ["id", "projectUpdateId", "userId", "reaction", "projectId", "_count", "_avg", "_max", "_min", "_sum"],
  ReactionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "projectUpdateId", "userId", "reaction", "projectId"],
  StripeTransactionWhereInput: ["AND", "OR", "NOT", "id", "projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency"],
  StripeTransactionOrderByWithRelationInput: ["id", "projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency"],
  StripeTransactionWhereUniqueInput: ["id"],
  StripeTransactionOrderByWithAggregationInput: ["id", "projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency", "_count", "_avg", "_max", "_min", "_sum"],
  StripeTransactionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency"],
  UserWhereInput: ["AND", "OR", "NOT", "id", "role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "donation", "organisation_user", "organisation_users_user", "project_users_user", "user_projects_project", "wallet"],
  UserOrderByWithRelationInput: ["id", "role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "donation", "organisation_user", "organisation_users_user", "project_users_user", "user_projects_project", "wallet"],
  UserWhereUniqueInput: ["id", "walletAddress"],
  UserOrderByWithAggregationInput: ["id", "role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "_count", "_avg", "_max", "_min", "_sum"],
  UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified"],
  UserProjectsProjectWhereInput: ["AND", "OR", "NOT", "userId", "projectId", "project", "user"],
  UserProjectsProjectOrderByWithRelationInput: ["userId", "projectId", "project", "user"],
  UserProjectsProjectWhereUniqueInput: ["userId_projectId"],
  UserProjectsProjectOrderByWithAggregationInput: ["userId", "projectId", "_count", "_avg", "_max", "_min", "_sum"],
  UserProjectsProjectScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "userId", "projectId"],
  WalletWhereInput: ["AND", "OR", "NOT", "id", "address", "userId", "user"],
  WalletOrderByWithRelationInput: ["id", "address", "userId", "user"],
  WalletWhereUniqueInput: ["id", "address"],
  WalletOrderByWithAggregationInput: ["id", "address", "userId", "_count", "_avg", "_max", "_min", "_sum"],
  WalletScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "address", "userId"],
  AccountVerificationCreateInput: ["platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "user"],
  AccountVerificationUpdateInput: ["platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "user"],
  AccountVerificationCreateManyInput: ["id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "userId"],
  AccountVerificationUpdateManyMutationInput: ["platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt"],
  BankAccountCreateInput: ["projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status"],
  BankAccountUpdateInput: ["projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status"],
  BankAccountCreateManyInput: ["id", "projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status"],
  BankAccountUpdateManyMutationInput: ["projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status"],
  CategoryCreateInput: ["name", "value", "source", "project_categories_category"],
  CategoryUpdateInput: ["name", "value", "source", "project_categories_category"],
  CategoryCreateManyInput: ["id", "name", "value", "source"],
  CategoryUpdateManyMutationInput: ["name", "value", "source"],
  DonationCreateInput: ["transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "tokenAddress", "project", "user"],
  DonationUpdateInput: ["transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "tokenAddress", "project", "user"],
  DonationCreateManyInput: ["id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "userId", "tokenAddress"],
  DonationUpdateManyMutationInput: ["transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "tokenAddress"],
  OrganisationCreateInput: ["title", "description", "organisation_projects_project", "organisation_user", "organisation_users_user", "project_organisations_organisation"],
  OrganisationUpdateInput: ["title", "description", "organisation_projects_project", "organisation_user", "organisation_users_user", "project_organisations_organisation"],
  OrganisationCreateManyInput: ["id", "title", "description"],
  OrganisationUpdateManyMutationInput: ["title", "description"],
  OrganisationProjectsProjectCreateInput: ["organisation", "project"],
  OrganisationProjectsProjectUpdateInput: ["organisation", "project"],
  OrganisationProjectsProjectCreateManyInput: ["organisationId", "projectId"],
  OrganisationProjectsProjectUpdateManyMutationInput: [],
  OrganisationUserCreateInput: ["role", "organisation", "user"],
  OrganisationUserUpdateInput: ["role", "organisation", "user"],
  OrganisationUserCreateManyInput: ["id", "role", "organisationId", "userId"],
  OrganisationUserUpdateManyMutationInput: ["role"],
  OrganisationUsersUserCreateInput: ["organisation", "user"],
  OrganisationUsersUserUpdateInput: ["organisation", "user"],
  OrganisationUsersUserCreateManyInput: ["organisationId", "userId"],
  OrganisationUsersUserUpdateManyMutationInput: [],
  ProjectCreateInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  ProjectUpdateInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  ProjectCreateManyInput: ["id", "title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "statusId", "givingBlocksId", "website", "youtube", "slugHistory"],
  ProjectUpdateManyMutationInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory"],
  ProjectCategoriesCategoryCreateInput: ["category", "project"],
  ProjectCategoriesCategoryUpdateInput: ["category", "project"],
  ProjectCategoriesCategoryCreateManyInput: ["projectId", "categoryId"],
  ProjectCategoriesCategoryUpdateManyMutationInput: [],
  ProjectImageCreateInput: ["url", "project"],
  ProjectImageUpdateInput: ["url", "project"],
  ProjectImageCreateManyInput: ["id", "projectId", "url"],
  ProjectImageUpdateManyMutationInput: ["url"],
  ProjectOrganisationsOrganisationCreateInput: ["organisation", "project"],
  ProjectOrganisationsOrganisationUpdateInput: ["organisation", "project"],
  ProjectOrganisationsOrganisationCreateManyInput: ["projectId", "organisationId"],
  ProjectOrganisationsOrganisationUpdateManyMutationInput: [],
  ProjectStatusCreateInput: ["symbol", "name", "description", "project"],
  ProjectStatusUpdateInput: ["symbol", "name", "description", "project"],
  ProjectStatusCreateManyInput: ["id", "symbol", "name", "description"],
  ProjectStatusUpdateManyMutationInput: ["symbol", "name", "description"],
  ProjectUpdateCreateInput: ["title", "projectId", "userId", "content", "createdAt", "isMain"],
  ProjectUpdateUpdateInput: ["title", "projectId", "userId", "content", "createdAt", "isMain"],
  ProjectUpdateCreateManyInput: ["id", "title", "projectId", "userId", "content", "createdAt", "isMain"],
  ProjectUpdateUpdateManyMutationInput: ["title", "projectId", "userId", "content", "createdAt", "isMain"],
  ProjectUsersUserCreateInput: ["project", "user"],
  ProjectUsersUserUpdateInput: ["project", "user"],
  ProjectUsersUserCreateManyInput: ["projectId", "userId"],
  ProjectUsersUserUpdateManyMutationInput: [],
  QueryResultCacheCreateInput: ["identifier", "time", "duration", "query", "result"],
  QueryResultCacheUpdateInput: ["identifier", "time", "duration", "query", "result"],
  QueryResultCacheCreateManyInput: ["id", "identifier", "time", "duration", "query", "result"],
  QueryResultCacheUpdateManyMutationInput: ["identifier", "time", "duration", "query", "result"],
  ReactionCreateInput: ["projectUpdateId", "userId", "reaction", "project"],
  ReactionUpdateInput: ["projectUpdateId", "userId", "reaction", "project"],
  ReactionCreateManyInput: ["id", "projectUpdateId", "userId", "reaction", "projectId"],
  ReactionUpdateManyMutationInput: ["projectUpdateId", "userId", "reaction"],
  StripeTransactionCreateInput: ["projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency"],
  StripeTransactionUpdateInput: ["projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency"],
  StripeTransactionCreateManyInput: ["id", "projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency"],
  StripeTransactionUpdateManyMutationInput: ["projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency"],
  UserCreateInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "donation", "organisation_user", "organisation_users_user", "project_users_user", "user_projects_project", "wallet"],
  UserUpdateInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "donation", "organisation_user", "organisation_users_user", "project_users_user", "user_projects_project", "wallet"],
  UserCreateManyInput: ["id", "role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified"],
  UserUpdateManyMutationInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified"],
  UserProjectsProjectCreateInput: ["project", "user"],
  UserProjectsProjectUpdateInput: ["project", "user"],
  UserProjectsProjectCreateManyInput: ["userId", "projectId"],
  UserProjectsProjectUpdateManyMutationInput: [],
  WalletCreateInput: ["address", "user"],
  WalletUpdateInput: ["address", "user"],
  WalletCreateManyInput: ["id", "address", "userId"],
  WalletUpdateManyMutationInput: ["address"],
  IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
  DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  UserRelationFilter: ["is", "isNot"],
  AccountVerificationCountOrderByAggregateInput: ["id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "userId"],
  AccountVerificationAvgOrderByAggregateInput: ["id", "userId"],
  AccountVerificationMaxOrderByAggregateInput: ["id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "userId"],
  AccountVerificationMinOrderByAggregateInput: ["id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "userId"],
  AccountVerificationSumOrderByAggregateInput: ["id", "userId"],
  IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
  DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  BankAccountCountOrderByAggregateInput: ["id", "projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status"],
  BankAccountAvgOrderByAggregateInput: ["id", "projectId"],
  BankAccountMaxOrderByAggregateInput: ["id", "projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status"],
  BankAccountMinOrderByAggregateInput: ["id", "projectId", "productId", "bankName", "accountHolderName", "accountHolderType", "country", "currency", "accountId", "fingerprint", "last4", "routingNumber", "status"],
  BankAccountSumOrderByAggregateInput: ["id", "projectId"],
  StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
  ProjectCategoriesCategoryListRelationFilter: ["every", "some", "none"],
  ProjectCategoriesCategoryOrderByRelationAggregateInput: ["_count"],
  CategoryCountOrderByAggregateInput: ["id", "name", "value", "source"],
  CategoryAvgOrderByAggregateInput: ["id"],
  CategoryMaxOrderByAggregateInput: ["id", "name", "value", "source"],
  CategoryMinOrderByAggregateInput: ["id", "name", "value", "source"],
  CategorySumOrderByAggregateInput: ["id"],
  StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
  BoolFilter: ["equals", "not"],
  BoolNullableFilter: ["equals", "not"],
  FloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  FloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  ProjectRelationFilter: ["is", "isNot"],
  DonationCountOrderByAggregateInput: ["id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "userId", "tokenAddress"],
  DonationAvgOrderByAggregateInput: ["id", "nonce", "transactionNetworkId", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "projectId", "userId"],
  DonationMaxOrderByAggregateInput: ["id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "userId", "tokenAddress"],
  DonationMinOrderByAggregateInput: ["id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "userId", "tokenAddress"],
  DonationSumOrderByAggregateInput: ["id", "nonce", "transactionNetworkId", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "projectId", "userId"],
  BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  BoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  FloatWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  FloatNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  OrganisationProjectsProjectListRelationFilter: ["every", "some", "none"],
  OrganisationUserListRelationFilter: ["every", "some", "none"],
  OrganisationUsersUserListRelationFilter: ["every", "some", "none"],
  ProjectOrganisationsOrganisationListRelationFilter: ["every", "some", "none"],
  OrganisationProjectsProjectOrderByRelationAggregateInput: ["_count"],
  OrganisationUserOrderByRelationAggregateInput: ["_count"],
  OrganisationUsersUserOrderByRelationAggregateInput: ["_count"],
  ProjectOrganisationsOrganisationOrderByRelationAggregateInput: ["_count"],
  OrganisationCountOrderByAggregateInput: ["id", "title", "description"],
  OrganisationAvgOrderByAggregateInput: ["id"],
  OrganisationMaxOrderByAggregateInput: ["id", "title", "description"],
  OrganisationMinOrderByAggregateInput: ["id", "title", "description"],
  OrganisationSumOrderByAggregateInput: ["id"],
  OrganisationRelationFilter: ["is", "isNot"],
  OrganisationProjectsProjectOrganisationIdProjectIdCompoundUniqueInput: ["organisationId", "projectId"],
  OrganisationProjectsProjectCountOrderByAggregateInput: ["organisationId", "projectId"],
  OrganisationProjectsProjectAvgOrderByAggregateInput: ["organisationId", "projectId"],
  OrganisationProjectsProjectMaxOrderByAggregateInput: ["organisationId", "projectId"],
  OrganisationProjectsProjectMinOrderByAggregateInput: ["organisationId", "projectId"],
  OrganisationProjectsProjectSumOrderByAggregateInput: ["organisationId", "projectId"],
  OrganisationUserCountOrderByAggregateInput: ["id", "role", "organisationId", "userId"],
  OrganisationUserAvgOrderByAggregateInput: ["id", "organisationId", "userId"],
  OrganisationUserMaxOrderByAggregateInput: ["id", "role", "organisationId", "userId"],
  OrganisationUserMinOrderByAggregateInput: ["id", "role", "organisationId", "userId"],
  OrganisationUserSumOrderByAggregateInput: ["id", "organisationId", "userId"],
  OrganisationUsersUserOrganisationIdUserIdCompoundUniqueInput: ["organisationId", "userId"],
  OrganisationUsersUserCountOrderByAggregateInput: ["organisationId", "userId"],
  OrganisationUsersUserAvgOrderByAggregateInput: ["organisationId", "userId"],
  OrganisationUsersUserMaxOrderByAggregateInput: ["organisationId", "userId"],
  OrganisationUsersUserMinOrderByAggregateInput: ["organisationId", "userId"],
  OrganisationUsersUserSumOrderByAggregateInput: ["organisationId", "userId"],
  StringNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
  DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  ProjectStatusRelationFilter: ["is", "isNot"],
  DonationListRelationFilter: ["every", "some", "none"],
  ProjectImageListRelationFilter: ["every", "some", "none"],
  ProjectUsersUserListRelationFilter: ["every", "some", "none"],
  ReactionListRelationFilter: ["every", "some", "none"],
  UserProjectsProjectListRelationFilter: ["every", "some", "none"],
  DonationOrderByRelationAggregateInput: ["_count"],
  ProjectImageOrderByRelationAggregateInput: ["_count"],
  ProjectUsersUserOrderByRelationAggregateInput: ["_count"],
  ReactionOrderByRelationAggregateInput: ["_count"],
  UserProjectsProjectOrderByRelationAggregateInput: ["_count"],
  ProjectCountOrderByAggregateInput: ["id", "title", "slug", "slugHistory", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "statusId", "givingBlocksId", "website", "youtube"],
  ProjectAvgOrderByAggregateInput: ["id", "organisationId", "balance", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "statusId"],
  ProjectMaxOrderByAggregateInput: ["id", "title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "statusId", "givingBlocksId", "website", "youtube"],
  ProjectMinOrderByAggregateInput: ["id", "title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "statusId", "givingBlocksId", "website", "youtube"],
  ProjectSumOrderByAggregateInput: ["id", "organisationId", "balance", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "statusId"],
  DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  CategoryRelationFilter: ["is", "isNot"],
  ProjectCategoriesCategoryProjectIdCategoryIdCompoundUniqueInput: ["projectId", "categoryId"],
  ProjectCategoriesCategoryCountOrderByAggregateInput: ["projectId", "categoryId"],
  ProjectCategoriesCategoryAvgOrderByAggregateInput: ["projectId", "categoryId"],
  ProjectCategoriesCategoryMaxOrderByAggregateInput: ["projectId", "categoryId"],
  ProjectCategoriesCategoryMinOrderByAggregateInput: ["projectId", "categoryId"],
  ProjectCategoriesCategorySumOrderByAggregateInput: ["projectId", "categoryId"],
  ProjectImageCountOrderByAggregateInput: ["id", "projectId", "url"],
  ProjectImageAvgOrderByAggregateInput: ["id", "projectId"],
  ProjectImageMaxOrderByAggregateInput: ["id", "projectId", "url"],
  ProjectImageMinOrderByAggregateInput: ["id", "projectId", "url"],
  ProjectImageSumOrderByAggregateInput: ["id", "projectId"],
  ProjectOrganisationsOrganisationProjectIdOrganisationIdCompoundUniqueInput: ["projectId", "organisationId"],
  ProjectOrganisationsOrganisationCountOrderByAggregateInput: ["projectId", "organisationId"],
  ProjectOrganisationsOrganisationAvgOrderByAggregateInput: ["projectId", "organisationId"],
  ProjectOrganisationsOrganisationMaxOrderByAggregateInput: ["projectId", "organisationId"],
  ProjectOrganisationsOrganisationMinOrderByAggregateInput: ["projectId", "organisationId"],
  ProjectOrganisationsOrganisationSumOrderByAggregateInput: ["projectId", "organisationId"],
  ProjectListRelationFilter: ["every", "some", "none"],
  ProjectOrderByRelationAggregateInput: ["_count"],
  ProjectStatusCountOrderByAggregateInput: ["id", "symbol", "name", "description"],
  ProjectStatusAvgOrderByAggregateInput: ["id"],
  ProjectStatusMaxOrderByAggregateInput: ["id", "symbol", "name", "description"],
  ProjectStatusMinOrderByAggregateInput: ["id", "symbol", "name", "description"],
  ProjectStatusSumOrderByAggregateInput: ["id"],
  ProjectUpdateCountOrderByAggregateInput: ["id", "title", "projectId", "userId", "content", "createdAt", "isMain"],
  ProjectUpdateAvgOrderByAggregateInput: ["id", "projectId", "userId"],
  ProjectUpdateMaxOrderByAggregateInput: ["id", "title", "projectId", "userId", "content", "createdAt", "isMain"],
  ProjectUpdateMinOrderByAggregateInput: ["id", "title", "projectId", "userId", "content", "createdAt", "isMain"],
  ProjectUpdateSumOrderByAggregateInput: ["id", "projectId", "userId"],
  ProjectUsersUserProjectIdUserIdCompoundUniqueInput: ["projectId", "userId"],
  ProjectUsersUserCountOrderByAggregateInput: ["projectId", "userId"],
  ProjectUsersUserAvgOrderByAggregateInput: ["projectId", "userId"],
  ProjectUsersUserMaxOrderByAggregateInput: ["projectId", "userId"],
  ProjectUsersUserMinOrderByAggregateInput: ["projectId", "userId"],
  ProjectUsersUserSumOrderByAggregateInput: ["projectId", "userId"],
  BigIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  QueryResultCacheCountOrderByAggregateInput: ["id", "identifier", "time", "duration", "query", "result"],
  QueryResultCacheAvgOrderByAggregateInput: ["id", "time", "duration"],
  QueryResultCacheMaxOrderByAggregateInput: ["id", "identifier", "time", "duration", "query", "result"],
  QueryResultCacheMinOrderByAggregateInput: ["id", "identifier", "time", "duration", "query", "result"],
  QueryResultCacheSumOrderByAggregateInput: ["id", "time", "duration"],
  BigIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  ReactionCountOrderByAggregateInput: ["id", "projectUpdateId", "userId", "reaction", "projectId"],
  ReactionAvgOrderByAggregateInput: ["id", "projectUpdateId", "userId", "projectId"],
  ReactionMaxOrderByAggregateInput: ["id", "projectUpdateId", "userId", "reaction", "projectId"],
  ReactionMinOrderByAggregateInput: ["id", "projectUpdateId", "userId", "reaction", "projectId"],
  ReactionSumOrderByAggregateInput: ["id", "projectUpdateId", "userId", "projectId"],
  StripeTransactionCountOrderByAggregateInput: ["id", "projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency"],
  StripeTransactionAvgOrderByAggregateInput: ["id", "projectId", "amount"],
  StripeTransactionMaxOrderByAggregateInput: ["id", "projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency"],
  StripeTransactionMinOrderByAggregateInput: ["id", "projectId", "status", "sessionId", "donorCustomerId", "donorName", "donorEmail", "createdAt", "amount", "donateToGiveth", "anonymous", "currency"],
  StripeTransactionSumOrderByAggregateInput: ["id", "projectId", "amount"],
  EnumUserRoleEnumFilter: ["equals", "in", "notIn", "not"],
  AccountVerificationListRelationFilter: ["every", "some", "none"],
  WalletListRelationFilter: ["every", "some", "none"],
  AccountVerificationOrderByRelationAggregateInput: ["_count"],
  WalletOrderByRelationAggregateInput: ["_count"],
  UserCountOrderByAggregateInput: ["id", "role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified"],
  UserAvgOrderByAggregateInput: ["id"],
  UserMaxOrderByAggregateInput: ["id", "role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified"],
  UserMinOrderByAggregateInput: ["id", "role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified"],
  UserSumOrderByAggregateInput: ["id"],
  EnumUserRoleEnumWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  UserProjectsProjectUserIdProjectIdCompoundUniqueInput: ["userId", "projectId"],
  UserProjectsProjectCountOrderByAggregateInput: ["userId", "projectId"],
  UserProjectsProjectAvgOrderByAggregateInput: ["userId", "projectId"],
  UserProjectsProjectMaxOrderByAggregateInput: ["userId", "projectId"],
  UserProjectsProjectMinOrderByAggregateInput: ["userId", "projectId"],
  UserProjectsProjectSumOrderByAggregateInput: ["userId", "projectId"],
  WalletCountOrderByAggregateInput: ["id", "address", "userId"],
  WalletAvgOrderByAggregateInput: ["id", "userId"],
  WalletMaxOrderByAggregateInput: ["id", "address", "userId"],
  WalletMinOrderByAggregateInput: ["id", "address", "userId"],
  WalletSumOrderByAggregateInput: ["id", "userId"],
  UserCreateNestedOneWithoutAccount_verificationInput: ["create", "connectOrCreate", "connect"],
  StringFieldUpdateOperationsInput: ["set"],
  DateTimeFieldUpdateOperationsInput: ["set"],
  UserUpdateOneWithoutAccount_verificationInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  ProjectCategoriesCategoryCreateNestedManyWithoutCategoryInput: ["create", "connectOrCreate", "createMany", "connect"],
  NullableStringFieldUpdateOperationsInput: ["set"],
  ProjectCategoriesCategoryUpdateManyWithoutCategoryInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ProjectCreateNestedOneWithoutDonationInput: ["create", "connectOrCreate", "connect"],
  UserCreateNestedOneWithoutDonationInput: ["create", "connectOrCreate", "connect"],
  BoolFieldUpdateOperationsInput: ["set"],
  NullableBoolFieldUpdateOperationsInput: ["set"],
  FloatFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  NullableFloatFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  ProjectUpdateOneWithoutDonationInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserUpdateOneWithoutDonationInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  OrganisationProjectsProjectCreateNestedManyWithoutOrganisationInput: ["create", "connectOrCreate", "createMany", "connect"],
  OrganisationUserCreateNestedManyWithoutOrganisationInput: ["create", "connectOrCreate", "createMany", "connect"],
  OrganisationUsersUserCreateNestedManyWithoutOrganisationInput: ["create", "connectOrCreate", "createMany", "connect"],
  ProjectOrganisationsOrganisationCreateNestedManyWithoutOrganisationInput: ["create", "connectOrCreate", "createMany", "connect"],
  OrganisationProjectsProjectUpdateManyWithoutOrganisationInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  OrganisationUserUpdateManyWithoutOrganisationInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  OrganisationUsersUserUpdateManyWithoutOrganisationInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ProjectOrganisationsOrganisationUpdateManyWithoutOrganisationInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  OrganisationCreateNestedOneWithoutOrganisation_projects_projectInput: ["create", "connectOrCreate", "connect"],
  ProjectCreateNestedOneWithoutOrganisation_projects_projectInput: ["create", "connectOrCreate", "connect"],
  OrganisationUpdateOneRequiredWithoutOrganisation_projects_projectInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ProjectUpdateOneRequiredWithoutOrganisation_projects_projectInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  OrganisationCreateNestedOneWithoutOrganisation_userInput: ["create", "connectOrCreate", "connect"],
  UserCreateNestedOneWithoutOrganisation_userInput: ["create", "connectOrCreate", "connect"],
  OrganisationUpdateOneWithoutOrganisation_userInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserUpdateOneWithoutOrganisation_userInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  OrganisationCreateNestedOneWithoutOrganisation_users_userInput: ["create", "connectOrCreate", "connect"],
  UserCreateNestedOneWithoutOrganisation_users_userInput: ["create", "connectOrCreate", "connect"],
  OrganisationUpdateOneRequiredWithoutOrganisation_users_userInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  UserUpdateOneRequiredWithoutOrganisation_users_userInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ProjectCreateslugHistoryInput: ["set"],
  ProjectStatusCreateNestedOneWithoutProjectInput: ["create", "connectOrCreate", "connect"],
  DonationCreateNestedManyWithoutProjectInput: ["create", "connectOrCreate", "createMany", "connect"],
  OrganisationProjectsProjectCreateNestedManyWithoutProjectInput: ["create", "connectOrCreate", "createMany", "connect"],
  ProjectCategoriesCategoryCreateNestedManyWithoutProjectInput: ["create", "connectOrCreate", "createMany", "connect"],
  ProjectImageCreateNestedManyWithoutProjectInput: ["create", "connectOrCreate", "createMany", "connect"],
  ProjectOrganisationsOrganisationCreateNestedManyWithoutProjectInput: ["create", "connectOrCreate", "createMany", "connect"],
  ProjectUsersUserCreateNestedManyWithoutProjectInput: ["create", "connectOrCreate", "createMany", "connect"],
  ReactionCreateNestedManyWithoutProjectInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserProjectsProjectCreateNestedManyWithoutProjectInput: ["create", "connectOrCreate", "createMany", "connect"],
  NullableDateTimeFieldUpdateOperationsInput: ["set"],
  ProjectUpdateslugHistoryInput: ["set", "push"],
  ProjectStatusUpdateOneWithoutProjectInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  DonationUpdateManyWithoutProjectInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  OrganisationProjectsProjectUpdateManyWithoutProjectInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ProjectCategoriesCategoryUpdateManyWithoutProjectInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ProjectImageUpdateManyWithoutProjectInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ProjectOrganisationsOrganisationUpdateManyWithoutProjectInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ProjectUsersUserUpdateManyWithoutProjectInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ReactionUpdateManyWithoutProjectInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserProjectsProjectUpdateManyWithoutProjectInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ProjectCreateManyslugHistoryInput: ["set"],
  CategoryCreateNestedOneWithoutProject_categories_categoryInput: ["create", "connectOrCreate", "connect"],
  ProjectCreateNestedOneWithoutProject_categories_categoryInput: ["create", "connectOrCreate", "connect"],
  CategoryUpdateOneRequiredWithoutProject_categories_categoryInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ProjectUpdateOneRequiredWithoutProject_categories_categoryInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ProjectCreateNestedOneWithoutProject_imageInput: ["create", "connectOrCreate", "connect"],
  ProjectUpdateOneWithoutProject_imageInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  OrganisationCreateNestedOneWithoutProject_organisations_organisationInput: ["create", "connectOrCreate", "connect"],
  ProjectCreateNestedOneWithoutProject_organisations_organisationInput: ["create", "connectOrCreate", "connect"],
  OrganisationUpdateOneRequiredWithoutProject_organisations_organisationInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ProjectUpdateOneRequiredWithoutProject_organisations_organisationInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ProjectCreateNestedManyWithoutProject_statusInput: ["create", "connectOrCreate", "createMany", "connect"],
  ProjectUpdateManyWithoutProject_statusInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ProjectCreateNestedOneWithoutProject_users_userInput: ["create", "connectOrCreate", "connect"],
  UserCreateNestedOneWithoutProject_users_userInput: ["create", "connectOrCreate", "connect"],
  ProjectUpdateOneRequiredWithoutProject_users_userInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  UserUpdateOneRequiredWithoutProject_users_userInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  BigIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  ProjectCreateNestedOneWithoutReactionInput: ["create", "connectOrCreate", "connect"],
  ProjectUpdateOneWithoutReactionInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  AccountVerificationCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  DonationCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  OrganisationUserCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  OrganisationUsersUserCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  ProjectUsersUserCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserProjectsProjectCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  WalletCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  EnumUserRoleEnumFieldUpdateOperationsInput: ["set"],
  AccountVerificationUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  DonationUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  OrganisationUserUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  OrganisationUsersUserUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ProjectUsersUserUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserProjectsProjectUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  WalletUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ProjectCreateNestedOneWithoutUser_projects_projectInput: ["create", "connectOrCreate", "connect"],
  UserCreateNestedOneWithoutUser_projects_projectInput: ["create", "connectOrCreate", "connect"],
  ProjectUpdateOneRequiredWithoutUser_projects_projectInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  UserUpdateOneRequiredWithoutUser_projects_projectInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  UserCreateNestedOneWithoutWalletInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutWalletInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
  NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
  NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
  NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
  NestedBoolFilter: ["equals", "not"],
  NestedBoolNullableFilter: ["equals", "not"],
  NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  NestedBoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  NestedFloatWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  NestedBigIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedBigIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedEnumUserRoleEnumFilter: ["equals", "in", "notIn", "not"],
  NestedEnumUserRoleEnumWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  UserCreateWithoutAccount_verificationInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "donation", "organisation_user", "organisation_users_user", "project_users_user", "user_projects_project", "wallet"],
  UserCreateOrConnectWithoutAccount_verificationInput: ["where", "create"],
  UserUpsertWithoutAccount_verificationInput: ["update", "create"],
  UserUpdateWithoutAccount_verificationInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "donation", "organisation_user", "organisation_users_user", "project_users_user", "user_projects_project", "wallet"],
  ProjectCategoriesCategoryCreateWithoutCategoryInput: ["project"],
  ProjectCategoriesCategoryCreateOrConnectWithoutCategoryInput: ["where", "create"],
  ProjectCategoriesCategoryCreateManyCategoryInputEnvelope: ["data", "skipDuplicates"],
  ProjectCategoriesCategoryUpsertWithWhereUniqueWithoutCategoryInput: ["where", "update", "create"],
  ProjectCategoriesCategoryUpdateWithWhereUniqueWithoutCategoryInput: ["where", "data"],
  ProjectCategoriesCategoryUpdateManyWithWhereWithoutCategoryInput: ["where", "data"],
  ProjectCategoriesCategoryScalarWhereInput: ["AND", "OR", "NOT", "projectId", "categoryId"],
  ProjectCreateWithoutDonationInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  ProjectCreateOrConnectWithoutDonationInput: ["where", "create"],
  UserCreateWithoutDonationInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "organisation_user", "organisation_users_user", "project_users_user", "user_projects_project", "wallet"],
  UserCreateOrConnectWithoutDonationInput: ["where", "create"],
  ProjectUpsertWithoutDonationInput: ["update", "create"],
  ProjectUpdateWithoutDonationInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  UserUpsertWithoutDonationInput: ["update", "create"],
  UserUpdateWithoutDonationInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "organisation_user", "organisation_users_user", "project_users_user", "user_projects_project", "wallet"],
  OrganisationProjectsProjectCreateWithoutOrganisationInput: ["project"],
  OrganisationProjectsProjectCreateOrConnectWithoutOrganisationInput: ["where", "create"],
  OrganisationProjectsProjectCreateManyOrganisationInputEnvelope: ["data", "skipDuplicates"],
  OrganisationUserCreateWithoutOrganisationInput: ["role", "user"],
  OrganisationUserCreateOrConnectWithoutOrganisationInput: ["where", "create"],
  OrganisationUserCreateManyOrganisationInputEnvelope: ["data", "skipDuplicates"],
  OrganisationUsersUserCreateWithoutOrganisationInput: ["user"],
  OrganisationUsersUserCreateOrConnectWithoutOrganisationInput: ["where", "create"],
  OrganisationUsersUserCreateManyOrganisationInputEnvelope: ["data", "skipDuplicates"],
  ProjectOrganisationsOrganisationCreateWithoutOrganisationInput: ["project"],
  ProjectOrganisationsOrganisationCreateOrConnectWithoutOrganisationInput: ["where", "create"],
  ProjectOrganisationsOrganisationCreateManyOrganisationInputEnvelope: ["data", "skipDuplicates"],
  OrganisationProjectsProjectUpsertWithWhereUniqueWithoutOrganisationInput: ["where", "update", "create"],
  OrganisationProjectsProjectUpdateWithWhereUniqueWithoutOrganisationInput: ["where", "data"],
  OrganisationProjectsProjectUpdateManyWithWhereWithoutOrganisationInput: ["where", "data"],
  OrganisationProjectsProjectScalarWhereInput: ["AND", "OR", "NOT", "organisationId", "projectId"],
  OrganisationUserUpsertWithWhereUniqueWithoutOrganisationInput: ["where", "update", "create"],
  OrganisationUserUpdateWithWhereUniqueWithoutOrganisationInput: ["where", "data"],
  OrganisationUserUpdateManyWithWhereWithoutOrganisationInput: ["where", "data"],
  OrganisationUserScalarWhereInput: ["AND", "OR", "NOT", "id", "role", "organisationId", "userId"],
  OrganisationUsersUserUpsertWithWhereUniqueWithoutOrganisationInput: ["where", "update", "create"],
  OrganisationUsersUserUpdateWithWhereUniqueWithoutOrganisationInput: ["where", "data"],
  OrganisationUsersUserUpdateManyWithWhereWithoutOrganisationInput: ["where", "data"],
  OrganisationUsersUserScalarWhereInput: ["AND", "OR", "NOT", "organisationId", "userId"],
  ProjectOrganisationsOrganisationUpsertWithWhereUniqueWithoutOrganisationInput: ["where", "update", "create"],
  ProjectOrganisationsOrganisationUpdateWithWhereUniqueWithoutOrganisationInput: ["where", "data"],
  ProjectOrganisationsOrganisationUpdateManyWithWhereWithoutOrganisationInput: ["where", "data"],
  ProjectOrganisationsOrganisationScalarWhereInput: ["AND", "OR", "NOT", "projectId", "organisationId"],
  OrganisationCreateWithoutOrganisation_projects_projectInput: ["title", "description", "organisation_user", "organisation_users_user", "project_organisations_organisation"],
  OrganisationCreateOrConnectWithoutOrganisation_projects_projectInput: ["where", "create"],
  ProjectCreateWithoutOrganisation_projects_projectInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  ProjectCreateOrConnectWithoutOrganisation_projects_projectInput: ["where", "create"],
  OrganisationUpsertWithoutOrganisation_projects_projectInput: ["update", "create"],
  OrganisationUpdateWithoutOrganisation_projects_projectInput: ["title", "description", "organisation_user", "organisation_users_user", "project_organisations_organisation"],
  ProjectUpsertWithoutOrganisation_projects_projectInput: ["update", "create"],
  ProjectUpdateWithoutOrganisation_projects_projectInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  OrganisationCreateWithoutOrganisation_userInput: ["title", "description", "organisation_projects_project", "organisation_users_user", "project_organisations_organisation"],
  OrganisationCreateOrConnectWithoutOrganisation_userInput: ["where", "create"],
  UserCreateWithoutOrganisation_userInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "donation", "organisation_users_user", "project_users_user", "user_projects_project", "wallet"],
  UserCreateOrConnectWithoutOrganisation_userInput: ["where", "create"],
  OrganisationUpsertWithoutOrganisation_userInput: ["update", "create"],
  OrganisationUpdateWithoutOrganisation_userInput: ["title", "description", "organisation_projects_project", "organisation_users_user", "project_organisations_organisation"],
  UserUpsertWithoutOrganisation_userInput: ["update", "create"],
  UserUpdateWithoutOrganisation_userInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "donation", "organisation_users_user", "project_users_user", "user_projects_project", "wallet"],
  OrganisationCreateWithoutOrganisation_users_userInput: ["title", "description", "organisation_projects_project", "organisation_user", "project_organisations_organisation"],
  OrganisationCreateOrConnectWithoutOrganisation_users_userInput: ["where", "create"],
  UserCreateWithoutOrganisation_users_userInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "donation", "organisation_user", "project_users_user", "user_projects_project", "wallet"],
  UserCreateOrConnectWithoutOrganisation_users_userInput: ["where", "create"],
  OrganisationUpsertWithoutOrganisation_users_userInput: ["update", "create"],
  OrganisationUpdateWithoutOrganisation_users_userInput: ["title", "description", "organisation_projects_project", "organisation_user", "project_organisations_organisation"],
  UserUpsertWithoutOrganisation_users_userInput: ["update", "create"],
  UserUpdateWithoutOrganisation_users_userInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "donation", "organisation_user", "project_users_user", "user_projects_project", "wallet"],
  ProjectStatusCreateWithoutProjectInput: ["symbol", "name", "description"],
  ProjectStatusCreateOrConnectWithoutProjectInput: ["where", "create"],
  DonationCreateWithoutProjectInput: ["transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "tokenAddress", "user"],
  DonationCreateOrConnectWithoutProjectInput: ["where", "create"],
  DonationCreateManyProjectInputEnvelope: ["data", "skipDuplicates"],
  OrganisationProjectsProjectCreateWithoutProjectInput: ["organisation"],
  OrganisationProjectsProjectCreateOrConnectWithoutProjectInput: ["where", "create"],
  OrganisationProjectsProjectCreateManyProjectInputEnvelope: ["data", "skipDuplicates"],
  ProjectCategoriesCategoryCreateWithoutProjectInput: ["category"],
  ProjectCategoriesCategoryCreateOrConnectWithoutProjectInput: ["where", "create"],
  ProjectCategoriesCategoryCreateManyProjectInputEnvelope: ["data", "skipDuplicates"],
  ProjectImageCreateWithoutProjectInput: ["url"],
  ProjectImageCreateOrConnectWithoutProjectInput: ["where", "create"],
  ProjectImageCreateManyProjectInputEnvelope: ["data", "skipDuplicates"],
  ProjectOrganisationsOrganisationCreateWithoutProjectInput: ["organisation"],
  ProjectOrganisationsOrganisationCreateOrConnectWithoutProjectInput: ["where", "create"],
  ProjectOrganisationsOrganisationCreateManyProjectInputEnvelope: ["data", "skipDuplicates"],
  ProjectUsersUserCreateWithoutProjectInput: ["user"],
  ProjectUsersUserCreateOrConnectWithoutProjectInput: ["where", "create"],
  ProjectUsersUserCreateManyProjectInputEnvelope: ["data", "skipDuplicates"],
  ReactionCreateWithoutProjectInput: ["projectUpdateId", "userId", "reaction"],
  ReactionCreateOrConnectWithoutProjectInput: ["where", "create"],
  ReactionCreateManyProjectInputEnvelope: ["data", "skipDuplicates"],
  UserProjectsProjectCreateWithoutProjectInput: ["user"],
  UserProjectsProjectCreateOrConnectWithoutProjectInput: ["where", "create"],
  UserProjectsProjectCreateManyProjectInputEnvelope: ["data", "skipDuplicates"],
  ProjectStatusUpsertWithoutProjectInput: ["update", "create"],
  ProjectStatusUpdateWithoutProjectInput: ["symbol", "name", "description"],
  DonationUpsertWithWhereUniqueWithoutProjectInput: ["where", "update", "create"],
  DonationUpdateWithWhereUniqueWithoutProjectInput: ["where", "data"],
  DonationUpdateManyWithWhereWithoutProjectInput: ["where", "data"],
  DonationScalarWhereInput: ["AND", "OR", "NOT", "id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "userId", "tokenAddress"],
  OrganisationProjectsProjectUpsertWithWhereUniqueWithoutProjectInput: ["where", "update", "create"],
  OrganisationProjectsProjectUpdateWithWhereUniqueWithoutProjectInput: ["where", "data"],
  OrganisationProjectsProjectUpdateManyWithWhereWithoutProjectInput: ["where", "data"],
  ProjectCategoriesCategoryUpsertWithWhereUniqueWithoutProjectInput: ["where", "update", "create"],
  ProjectCategoriesCategoryUpdateWithWhereUniqueWithoutProjectInput: ["where", "data"],
  ProjectCategoriesCategoryUpdateManyWithWhereWithoutProjectInput: ["where", "data"],
  ProjectImageUpsertWithWhereUniqueWithoutProjectInput: ["where", "update", "create"],
  ProjectImageUpdateWithWhereUniqueWithoutProjectInput: ["where", "data"],
  ProjectImageUpdateManyWithWhereWithoutProjectInput: ["where", "data"],
  ProjectImageScalarWhereInput: ["AND", "OR", "NOT", "id", "projectId", "url"],
  ProjectOrganisationsOrganisationUpsertWithWhereUniqueWithoutProjectInput: ["where", "update", "create"],
  ProjectOrganisationsOrganisationUpdateWithWhereUniqueWithoutProjectInput: ["where", "data"],
  ProjectOrganisationsOrganisationUpdateManyWithWhereWithoutProjectInput: ["where", "data"],
  ProjectUsersUserUpsertWithWhereUniqueWithoutProjectInput: ["where", "update", "create"],
  ProjectUsersUserUpdateWithWhereUniqueWithoutProjectInput: ["where", "data"],
  ProjectUsersUserUpdateManyWithWhereWithoutProjectInput: ["where", "data"],
  ProjectUsersUserScalarWhereInput: ["AND", "OR", "NOT", "projectId", "userId"],
  ReactionUpsertWithWhereUniqueWithoutProjectInput: ["where", "update", "create"],
  ReactionUpdateWithWhereUniqueWithoutProjectInput: ["where", "data"],
  ReactionUpdateManyWithWhereWithoutProjectInput: ["where", "data"],
  ReactionScalarWhereInput: ["AND", "OR", "NOT", "id", "projectUpdateId", "userId", "reaction", "projectId"],
  UserProjectsProjectUpsertWithWhereUniqueWithoutProjectInput: ["where", "update", "create"],
  UserProjectsProjectUpdateWithWhereUniqueWithoutProjectInput: ["where", "data"],
  UserProjectsProjectUpdateManyWithWhereWithoutProjectInput: ["where", "data"],
  UserProjectsProjectScalarWhereInput: ["AND", "OR", "NOT", "userId", "projectId"],
  CategoryCreateWithoutProject_categories_categoryInput: ["name", "value", "source"],
  CategoryCreateOrConnectWithoutProject_categories_categoryInput: ["where", "create"],
  ProjectCreateWithoutProject_categories_categoryInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "organisation_projects_project", "project_image", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  ProjectCreateOrConnectWithoutProject_categories_categoryInput: ["where", "create"],
  CategoryUpsertWithoutProject_categories_categoryInput: ["update", "create"],
  CategoryUpdateWithoutProject_categories_categoryInput: ["name", "value", "source"],
  ProjectUpsertWithoutProject_categories_categoryInput: ["update", "create"],
  ProjectUpdateWithoutProject_categories_categoryInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "organisation_projects_project", "project_image", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  ProjectCreateWithoutProject_imageInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "organisation_projects_project", "project_categories_category", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  ProjectCreateOrConnectWithoutProject_imageInput: ["where", "create"],
  ProjectUpsertWithoutProject_imageInput: ["update", "create"],
  ProjectUpdateWithoutProject_imageInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "organisation_projects_project", "project_categories_category", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  OrganisationCreateWithoutProject_organisations_organisationInput: ["title", "description", "organisation_projects_project", "organisation_user", "organisation_users_user"],
  OrganisationCreateOrConnectWithoutProject_organisations_organisationInput: ["where", "create"],
  ProjectCreateWithoutProject_organisations_organisationInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_users_user", "reaction", "user_projects_project"],
  ProjectCreateOrConnectWithoutProject_organisations_organisationInput: ["where", "create"],
  OrganisationUpsertWithoutProject_organisations_organisationInput: ["update", "create"],
  OrganisationUpdateWithoutProject_organisations_organisationInput: ["title", "description", "organisation_projects_project", "organisation_user", "organisation_users_user"],
  ProjectUpsertWithoutProject_organisations_organisationInput: ["update", "create"],
  ProjectUpdateWithoutProject_organisations_organisationInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_users_user", "reaction", "user_projects_project"],
  ProjectCreateWithoutProject_statusInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  ProjectCreateOrConnectWithoutProject_statusInput: ["where", "create"],
  ProjectCreateManyProject_statusInputEnvelope: ["data", "skipDuplicates"],
  ProjectUpsertWithWhereUniqueWithoutProject_statusInput: ["where", "update", "create"],
  ProjectUpdateWithWhereUniqueWithoutProject_statusInput: ["where", "data"],
  ProjectUpdateManyWithWhereWithoutProject_statusInput: ["where", "data"],
  ProjectScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "slug", "slugHistory", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "statusId", "givingBlocksId", "website", "youtube"],
  ProjectCreateWithoutProject_users_userInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "reaction", "user_projects_project"],
  ProjectCreateOrConnectWithoutProject_users_userInput: ["where", "create"],
  UserCreateWithoutProject_users_userInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "donation", "organisation_user", "organisation_users_user", "user_projects_project", "wallet"],
  UserCreateOrConnectWithoutProject_users_userInput: ["where", "create"],
  ProjectUpsertWithoutProject_users_userInput: ["update", "create"],
  ProjectUpdateWithoutProject_users_userInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "reaction", "user_projects_project"],
  UserUpsertWithoutProject_users_userInput: ["update", "create"],
  UserUpdateWithoutProject_users_userInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "donation", "organisation_user", "organisation_users_user", "user_projects_project", "wallet"],
  ProjectCreateWithoutReactionInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "user_projects_project"],
  ProjectCreateOrConnectWithoutReactionInput: ["where", "create"],
  ProjectUpsertWithoutReactionInput: ["update", "create"],
  ProjectUpdateWithoutReactionInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "user_projects_project"],
  AccountVerificationCreateWithoutUserInput: ["platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt"],
  AccountVerificationCreateOrConnectWithoutUserInput: ["where", "create"],
  AccountVerificationCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  DonationCreateWithoutUserInput: ["transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "tokenAddress", "project"],
  DonationCreateOrConnectWithoutUserInput: ["where", "create"],
  DonationCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  OrganisationUserCreateWithoutUserInput: ["role", "organisation"],
  OrganisationUserCreateOrConnectWithoutUserInput: ["where", "create"],
  OrganisationUserCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  OrganisationUsersUserCreateWithoutUserInput: ["organisation"],
  OrganisationUsersUserCreateOrConnectWithoutUserInput: ["where", "create"],
  OrganisationUsersUserCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  ProjectUsersUserCreateWithoutUserInput: ["project"],
  ProjectUsersUserCreateOrConnectWithoutUserInput: ["where", "create"],
  ProjectUsersUserCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  UserProjectsProjectCreateWithoutUserInput: ["project"],
  UserProjectsProjectCreateOrConnectWithoutUserInput: ["where", "create"],
  UserProjectsProjectCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  WalletCreateWithoutUserInput: ["address"],
  WalletCreateOrConnectWithoutUserInput: ["where", "create"],
  WalletCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  AccountVerificationUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  AccountVerificationUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  AccountVerificationUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  AccountVerificationScalarWhereInput: ["AND", "OR", "NOT", "id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt", "userId"],
  DonationUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  DonationUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  DonationUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  OrganisationUserUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  OrganisationUserUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  OrganisationUserUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  OrganisationUsersUserUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  OrganisationUsersUserUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  OrganisationUsersUserUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  ProjectUsersUserUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  ProjectUsersUserUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  ProjectUsersUserUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  UserProjectsProjectUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  UserProjectsProjectUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  UserProjectsProjectUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  WalletUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  WalletUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  WalletUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  WalletScalarWhereInput: ["AND", "OR", "NOT", "id", "address", "userId"],
  ProjectCreateWithoutUser_projects_projectInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "reaction"],
  ProjectCreateOrConnectWithoutUser_projects_projectInput: ["where", "create"],
  UserCreateWithoutUser_projects_projectInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "donation", "organisation_user", "organisation_users_user", "project_users_user", "wallet"],
  UserCreateOrConnectWithoutUser_projects_projectInput: ["where", "create"],
  ProjectUpsertWithoutUser_projects_projectInput: ["update", "create"],
  ProjectUpdateWithoutUser_projects_projectInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "project_status", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "reaction"],
  UserUpsertWithoutUser_projects_projectInput: ["update", "create"],
  UserUpdateWithoutUser_projects_projectInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "donation", "organisation_user", "organisation_users_user", "project_users_user", "wallet"],
  UserCreateWithoutWalletInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "donation", "organisation_user", "organisation_users_user", "project_users_user", "user_projects_project"],
  UserCreateOrConnectWithoutWalletInput: ["where", "create"],
  UserUpsertWithoutWalletInput: ["update", "create"],
  UserUpdateWithoutWalletInput: ["role", "email", "firstName", "lastName", "name", "walletAddress", "password", "encryptedPassword", "avatar", "url", "location", "loginType", "dId", "confirmed", "segmentIdentified", "account_verification", "donation", "organisation_user", "organisation_users_user", "project_users_user", "user_projects_project"],
  ProjectCategoriesCategoryCreateManyCategoryInput: ["projectId"],
  ProjectCategoriesCategoryUpdateWithoutCategoryInput: ["project"],
  OrganisationProjectsProjectCreateManyOrganisationInput: ["projectId"],
  OrganisationUserCreateManyOrganisationInput: ["id", "role", "userId"],
  OrganisationUsersUserCreateManyOrganisationInput: ["userId"],
  ProjectOrganisationsOrganisationCreateManyOrganisationInput: ["projectId"],
  OrganisationProjectsProjectUpdateWithoutOrganisationInput: ["project"],
  OrganisationUserUpdateWithoutOrganisationInput: ["role", "user"],
  OrganisationUsersUserUpdateWithoutOrganisationInput: ["user"],
  ProjectOrganisationsOrganisationUpdateWithoutOrganisationInput: ["project"],
  DonationCreateManyProjectInput: ["id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "userId", "tokenAddress"],
  OrganisationProjectsProjectCreateManyProjectInput: ["organisationId"],
  ProjectCategoriesCategoryCreateManyProjectInput: ["categoryId"],
  ProjectImageCreateManyProjectInput: ["id", "url"],
  ProjectOrganisationsOrganisationCreateManyProjectInput: ["organisationId"],
  ProjectUsersUserCreateManyProjectInput: ["userId"],
  ReactionCreateManyProjectInput: ["id", "projectUpdateId", "userId", "reaction"],
  UserProjectsProjectCreateManyProjectInput: ["userId"],
  DonationUpdateWithoutProjectInput: ["transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "tokenAddress", "user"],
  OrganisationProjectsProjectUpdateWithoutProjectInput: ["organisation"],
  ProjectCategoriesCategoryUpdateWithoutProjectInput: ["category"],
  ProjectImageUpdateWithoutProjectInput: ["url"],
  ProjectOrganisationsOrganisationUpdateWithoutProjectInput: ["organisation"],
  ProjectUsersUserUpdateWithoutProjectInput: ["user"],
  ReactionUpdateWithoutProjectInput: ["projectUpdateId", "userId", "reaction"],
  UserProjectsProjectUpdateWithoutProjectInput: ["user"],
  ProjectCreateManyProject_statusInput: ["id", "title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory"],
  ProjectUpdateWithoutProject_statusInput: ["title", "slug", "admin", "description", "traceCampaignId", "organisationId", "creationDate", "updatedAt", "coOrdinates", "image", "impactLocation", "balance", "stripeAccountId", "walletAddress", "verified", "giveBacks", "qualityScore", "totalDonations", "totalReactions", "totalProjectUpdates", "listed", "givingBlocksId", "website", "youtube", "slugHistory", "donation", "organisation_projects_project", "project_categories_category", "project_image", "project_organisations_organisation", "project_users_user", "reaction", "user_projects_project"],
  AccountVerificationCreateManyUserInput: ["id", "platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt"],
  DonationCreateManyUserInput: ["id", "transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "projectId", "tokenAddress"],
  OrganisationUserCreateManyUserInput: ["id", "role", "organisationId"],
  OrganisationUsersUserCreateManyUserInput: ["organisationId"],
  ProjectUsersUserCreateManyUserInput: ["projectId"],
  UserProjectsProjectCreateManyUserInput: ["projectId"],
  WalletCreateManyUserInput: ["id", "address"],
  AccountVerificationUpdateWithoutUserInput: ["platform", "dId", "protocol", "claim", "attestation", "createdAt", "updatedAt"],
  DonationUpdateWithoutUserInput: ["transactionId", "nonce", "transactionNetworkId", "status", "verifyErrorMessage", "speedup", "isFiat", "toWalletAddress", "fromWalletAddress", "currency", "anonymous", "amount", "valueEth", "valueUsd", "priceEth", "priceUsd", "createdAt", "donationType", "transakStatus", "transakTransactionLink", "tokenAddress", "project"],
  OrganisationUserUpdateWithoutUserInput: ["role", "organisation"],
  OrganisationUsersUserUpdateWithoutUserInput: ["organisation"],
  ProjectUsersUserUpdateWithoutUserInput: ["project"],
  UserProjectsProjectUpdateWithoutUserInput: ["project"],
  WalletUpdateWithoutUserInput: ["address"]
};

type InputTypesNames = keyof typeof inputTypes;

type InputTypeFieldNames<TInput extends InputTypesNames> = Exclude<
  keyof typeof inputTypes[TInput]["prototype"],
  number | symbol
>;

type InputTypeFieldsConfig<
  TInput extends InputTypesNames
  > = FieldsConfig<InputTypeFieldNames<TInput>>;

export type InputTypeConfig<TInput extends InputTypesNames> = {
  class?: ClassDecorator[];
  fields?: InputTypeFieldsConfig<TInput>;
};

export type InputTypesEnhanceMap = {
  [TInput in InputTypesNames]?: InputTypeConfig<TInput>;
};

export function applyInputTypesEnhanceMap(
  inputTypesEnhanceMap: InputTypesEnhanceMap,
) {
  for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
    const inputTypeName = inputTypeEnhanceMapKey as keyof typeof inputTypesEnhanceMap;
    const typeConfig = inputTypesEnhanceMap[inputTypeName]!;
    const typeClass = inputTypes[inputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      inputsInfo[inputTypeName as keyof typeof inputsInfo],
    );
  }
}

